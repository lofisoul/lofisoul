{"ast":null,"code":"var _jsxFileName = \"/Users/jasonnolfi/lofisoul/components/SCList.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport SCPlayer from './SCPlayer';\nimport FetchUser from './FetchUser';\nimport User from './User';\nimport { SC_ID } from '../sc-config';\nimport { shuffle } from '../lib/utils';\n\nclass SCList extends Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"soundCloudResolveUser\", async user => {\n      try {\n        const userToResolve = await SC.resolve(`https://soundcloud.com/${user}`);\n        const response = await SC.get(`/users/${userToResolve.id}/favorites`, {\n          limit: 1000,\n          linked_partitioning: 1\n        });\n\n        if (response.collection.length < 5) {\n          this.setState({\n            fetchErrorMsg: `You don't have enough likes. Try favoriting some tracks on soundcloud!`\n          });\n          return;\n        }\n\n        this.initTrack(userToResolve);\n        this.setState({\n          user: userToResolve,\n          isModalOpen: false\n        });\n      } catch (e) {\n        const errorMsg = e.status === 404 ? `Whoops! That user doesn't exist!` : e.message;\n        this.setState({\n          fetchErrorMsg: errorMsg\n        });\n      }\n    });\n\n    _defineProperty(this, \"saveToState\", e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"onSubmit\", e => {\n      e.preventDefault();\n      this.soundCloudResolveUser(this.state.username);\n    });\n\n    _defineProperty(this, \"initTrack\", async user => {\n      //initialize SC\n      this.setState({\n        isFetching: true\n      });\n      const response = await SC.get(`/users/${user.id}/favorites`, {\n        limit: 1000,\n        linked_partitioning: 1\n      });\n      const sortedTracks = shuffle(response.collection, 5); //run logic for getting random song based on users that liked 5 sorted tracks\n\n      let randomPlaylist = await Promise.all(sortedTracks.map(async item => {\n        let newItem = await this.generateRandomPlaylist(item);\n        return newItem;\n      }));\n      this.setState({\n        isFetching: false,\n        fiveTracks: sortedTracks,\n        randomTracksFromUsers: randomPlaylist\n      });\n    });\n\n    _defineProperty(this, \"generateRandomPlaylist\", async track => {\n      const usersWhoLiked = await SC.get(`/tracks/${track.id}/favoriters`, {\n        limit: 1000,\n        linked_partitioning: 1\n      });\n      let userArr = usersWhoLiked.collection;\n      const arrayUsersFaves = userArr.filter(user => user.public_favorites_count > 0); //sort users without playlists\n      //TODO::need to figure out a way to filter out user\n\n      let randomUser = shuffle(arrayUsersFaves, 1)[0]; //get first list of random users\n\n      const userFaves = await SC.get(`/users/${randomUser.id}/favorites`, {\n        limit: 1000,\n        linked_partitioning: 1\n      });\n      const randomTrack = shuffle(userFaves.collection, 1)[0];\n      const randomObj = {\n        referral: track,\n        user: randomUser,\n        track: randomTrack\n      };\n      return randomObj;\n    });\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      SC.initialize({\n        client_id: SC_ID,\n        redirect_uri: 'http://jambox.thatdudeartoo.com/callback.html'\n      });\n    });\n\n    this.state = {\n      isFetching: false,\n      doneFetching: false,\n      fiveTracks: null,\n      randomTracksFromUsers: null,\n      isModalOpen: true,\n      username: '',\n      user: null,\n      fetchErrorMsg: '',\n      currentTrack: '',\n      tracks: null\n    };\n  } //function to resolve soundcloud user\n\n\n  render() {\n    const {\n      isFetching,\n      fiveTracks,\n      randomTracksFromUsers,\n      isModalOpen,\n      username,\n      fetchErrorMsg,\n      doneFetching,\n      user\n    } = this.state;\n    return __jsx(React.Fragment, null, fiveTracks && __jsx(SCPlayer, {\n      currentTrack: fiveTracks[0],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 20\n      }\n    }), __jsx(FetchUser, {\n      onSubmit: this.onSubmit,\n      isModalOpen: isModalOpen,\n      username: username,\n      saveToState: this.saveToState,\n      fetchErrorMsg: fetchErrorMsg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 5\n      }\n    }), user ? __jsx(User, {\n      user: user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }\n    }) : '', isFetching ? __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 6\n      }\n    }, \"Fetching...\") : __jsx(React.Fragment, null, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 7\n      }\n    }, fiveTracks ? fiveTracks.map(track => {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 12\n        }\n      }, __jsx(\"p\", {\n        key: track.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }\n      }, __jsx(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 14\n        }\n      }, track.user.username), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 14\n        }\n      }), \": \", track.title), __jsx(\"iframe\", {\n        width: \"100%\",\n        height: \"166\",\n        scrolling: \"no\",\n        frameborder: \"no\",\n        allow: \"autoplay\",\n        src: `https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${track.id}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }\n      }));\n    }) : ''), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 7\n      }\n    }, randomTracksFromUsers ? randomTracksFromUsers.map(item => {\n      return __jsx(\"div\", {\n        key: item.track.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 12\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }\n      }, __jsx(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 14\n        }\n      }, \"User:\"), ' ', item.user.username), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }\n      }, \"Song: \", item.track.title), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }\n      }, \"Referral:\", ' ', item.referral.title), __jsx(\"iframe\", {\n        width: \"100%\",\n        height: \"166\",\n        scrolling: \"no\",\n        frameborder: \"no\",\n        allow: \"autoplay\",\n        src: `https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${item.track.id}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }\n      }));\n    }) : '')));\n  }\n\n}\n\nexport default SCList;","map":{"version":3,"sources":["/Users/jasonnolfi/lofisoul/components/SCList.js"],"names":["React","Component","styled","SCPlayer","FetchUser","User","SC_ID","shuffle","SCList","constructor","user","userToResolve","SC","resolve","response","get","id","limit","linked_partitioning","collection","length","setState","fetchErrorMsg","initTrack","isModalOpen","e","errorMsg","status","message","target","name","value","preventDefault","soundCloudResolveUser","state","username","isFetching","sortedTracks","randomPlaylist","Promise","all","map","item","newItem","generateRandomPlaylist","fiveTracks","randomTracksFromUsers","track","usersWhoLiked","userArr","arrayUsersFaves","filter","public_favorites_count","randomUser","userFaves","randomTrack","randomObj","referral","initialize","client_id","redirect_uri","doneFetching","currentTrack","tracks","render","onSubmit","saveToState","title"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport styled from 'styled-components';\nimport SCPlayer from './SCPlayer';\nimport FetchUser from './FetchUser';\nimport User from './User';\nimport {SC_ID} from '../sc-config';\nimport {shuffle} from '../lib/utils';\n\nclass SCList extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tisFetching: false,\n\t\t\tdoneFetching: false,\n\t\t\tfiveTracks: null,\n\t\t\trandomTracksFromUsers: null,\n\t\t\tisModalOpen: true,\n\t\t\tusername: '',\n\t\t\tuser: null,\n\t\t\tfetchErrorMsg: '',\n\t\t\tcurrentTrack: '',\n\t\t\ttracks: null,\n\t\t};\n\t}\n\n\t//function to resolve soundcloud user\n\tsoundCloudResolveUser = async user => {\n\t\ttry {\n\t\t\tconst userToResolve = await SC.resolve(\n\t\t\t\t`https://soundcloud.com/${user}`,\n\t\t\t);\n\t\t\tconst response = await SC.get(\n\t\t\t\t`/users/${userToResolve.id}/favorites`,\n\t\t\t\t{\n\t\t\t\t\tlimit: 1000,\n\t\t\t\t\tlinked_partitioning: 1,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (response.collection.length < 5) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tfetchErrorMsg: `You don't have enough likes. Try favoriting some tracks on soundcloud!`,\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.initTrack(userToResolve);\n\t\t\tthis.setState({user: userToResolve, isModalOpen: false});\n\t\t} catch (e) {\n\t\t\tconst errorMsg =\n\t\t\t\te.status === 404\n\t\t\t\t\t? `Whoops! That user doesn't exist!`\n\t\t\t\t\t: e.message;\n\t\t\tthis.setState({fetchErrorMsg: errorMsg});\n\t\t}\n\t};\n\n\t//get SC user from form\n\tsaveToState = e => {\n\t\tthis.setState({[e.target.name]: e.target.value});\n\t};\n\n\tonSubmit = e => {\n\t\te.preventDefault();\n\t\tthis.soundCloudResolveUser(this.state.username);\n\t};\n\n\tinitTrack = async user => {\n\t\t//initialize SC\n\t\tthis.setState({isFetching: true});\n\n\t\tconst response = await SC.get(`/users/${user.id}/favorites`, {\n\t\t\tlimit: 1000,\n\t\t\tlinked_partitioning: 1,\n\t\t});\n\n\t\tconst sortedTracks = shuffle(response.collection, 5);\n\n\t\t//run logic for getting random song based on users that liked 5 sorted tracks\n\t\tlet randomPlaylist = await Promise.all(\n\t\t\tsortedTracks.map(async item => {\n\t\t\t\tlet newItem = await this.generateRandomPlaylist(item);\n\t\t\t\treturn newItem;\n\t\t\t}),\n\t\t);\n\n\t\tthis.setState({\n\t\t\tisFetching: false,\n\t\t\tfiveTracks: sortedTracks,\n\t\t\trandomTracksFromUsers: randomPlaylist,\n\t\t});\n\t};\n\n\tgenerateRandomPlaylist = async track => {\n\t\tconst usersWhoLiked = await SC.get(`/tracks/${track.id}/favoriters`, {\n\t\t\tlimit: 1000,\n\t\t\tlinked_partitioning: 1,\n\t\t});\n\n\t\tlet userArr = usersWhoLiked.collection;\n\t\tconst arrayUsersFaves = userArr.filter(\n\t\t\tuser => user.public_favorites_count > 0,\n\t\t);\n\t\t//sort users without playlists\n\t\t//TODO::need to figure out a way to filter out user\n\t\tlet randomUser = shuffle(arrayUsersFaves, 1)[0];\n\t\t//get first list of random users\n\t\tconst userFaves = await SC.get(`/users/${randomUser.id}/favorites`, {\n\t\t\tlimit: 1000,\n\t\t\tlinked_partitioning: 1,\n\t\t});\n\t\tconst randomTrack = shuffle(userFaves.collection, 1)[0];\n\t\tconst randomObj = {\n\t\t\treferral: track,\n\t\t\tuser: randomUser,\n\t\t\ttrack: randomTrack,\n\t\t};\n\t\treturn randomObj;\n\t};\n\n\tcomponentDidMount = () => {\n\t\tSC.initialize({\n\t\t\tclient_id: SC_ID,\n\t\t\tredirect_uri: 'http://jambox.thatdudeartoo.com/callback.html',\n\t\t});\n\t};\n\trender() {\n\t\tconst {\n\t\t\tisFetching,\n\t\t\tfiveTracks,\n\t\t\trandomTracksFromUsers,\n\t\t\tisModalOpen,\n\t\t\tusername,\n\t\t\tfetchErrorMsg,\n\t\t\tdoneFetching,\n\t\t\tuser,\n\t\t} = this.state;\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{fiveTracks && <SCPlayer currentTrack={fiveTracks[0]} />}\n\t\t\t\t<FetchUser\n\t\t\t\t\tonSubmit={this.onSubmit}\n\t\t\t\t\tisModalOpen={isModalOpen}\n\t\t\t\t\tusername={username}\n\t\t\t\t\tsaveToState={this.saveToState}\n\t\t\t\t\tfetchErrorMsg={fetchErrorMsg}\n\t\t\t\t/>\n\t\t\t\t{user ? <User user={user} /> : ''}\n\t\t\t\t{isFetching ? (\n\t\t\t\t\t<div>Fetching...</div>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t{fiveTracks\n\t\t\t\t\t\t\t\t? fiveTracks.map(track => {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<p key={track.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<strong>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{track.user.username}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</strong>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<br />: {track.title}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t<iframe\n\t\t\t\t\t\t\t\t\t\t\t\t\twidth=\"100%\"\n\t\t\t\t\t\t\t\t\t\t\t\t\theight=\"166\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tscrolling=\"no\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tframeborder=\"no\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tallow=\"autoplay\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={`https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${track.id}`}\n\t\t\t\t\t\t\t\t\t\t\t\t></iframe>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t\t: ''}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t{randomTracksFromUsers\n\t\t\t\t\t\t\t\t? randomTracksFromUsers.map(item => {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<div key={item.track.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<strong>User:</strong>{' '}\n\t\t\t\t\t\t\t\t\t\t\t\t\t{item.user.username}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t<p>Song: {item.track.title}</p>\n\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\tReferral:{' '}\n\t\t\t\t\t\t\t\t\t\t\t\t\t{item.referral.title}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t<iframe\n\t\t\t\t\t\t\t\t\t\t\t\t\twidth=\"100%\"\n\t\t\t\t\t\t\t\t\t\t\t\t\theight=\"166\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tscrolling=\"no\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tframeborder=\"no\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tallow=\"autoplay\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={`https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${item.track.id}`}\n\t\t\t\t\t\t\t\t\t\t\t\t></iframe>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t\t: ''}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default SCList;\n"]},"metadata":{},"sourceType":"module"}