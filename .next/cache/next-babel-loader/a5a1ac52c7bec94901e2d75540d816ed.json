{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/jasonnolfi/lofisoul/components/SCList.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport SCPlayer from \"./SCPlayer\";\nimport FetchUser from \"./FetchUser\";\nimport User from \"./User\";\nimport { scAppId, scUser } from \"../config\";\nimport { shuffle } from \"../lib/utils\";\n\nvar SCList = /*#__PURE__*/function (_Component) {\n  _inherits(SCList, _Component);\n\n  var _super = _createSuper(SCList);\n\n  function SCList() {\n    var _this;\n\n    _classCallCheck(this, SCList);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"soundCloudResolveUser\", function _callee(user) {\n      var userToResolve, response, errorMsg;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(SC.resolve(\"https://soundcloud.com/\".concat(user)));\n\n            case 3:\n              userToResolve = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(SC.get(\"/users/\".concat(userToResolve.id, \"/favorites\"), {\n                limit: 1000,\n                linked_partitioning: 1\n              }));\n\n            case 6:\n              response = _context.sent;\n\n              if (!(response.collection.length < 5)) {\n                _context.next = 10;\n                break;\n              }\n\n              _this.setState({\n                fetchErrorMsg: \"You don't have enough likes. Try favoriting some tracks on soundcloud!\"\n              });\n\n              return _context.abrupt(\"return\");\n\n            case 10:\n              _this.initTrack(userToResolve);\n\n              _this.setState({\n                user: userToResolve,\n                isModalOpen: false\n              });\n\n              _context.next = 18;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](0);\n              errorMsg = _context.t0.status === 404 ? \"Whoops! That user doesn't exist!\" : _context.t0.message;\n\n              _this.setState({\n                fetchErrorMsg: errorMsg\n              });\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 14]], Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"saveToState\", function (e) {\n      _this.setState(_defineProperty({}, e.target.name, e.target.value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", function (e) {\n      e.preventDefault();\n\n      _this.soundCloudResolveUser(_this.state.username);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"initTrack\", function _callee3(user) {\n      var response, sortedTracks, randomPlaylist;\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              //initialize SC\n              _this.setState({\n                isFetching: true\n              });\n\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(SC.get(\"/users/\".concat(user.id, \"/favorites\"), {\n                limit: 1000,\n                linked_partitioning: 1\n              }));\n\n            case 3:\n              response = _context3.sent;\n              sortedTracks = shuffle(response.collection, 5); //run logic for getting random song based on users that liked 5 sorted tracks\n\n              _context3.next = 7;\n              return _regeneratorRuntime.awrap(Promise.all(sortedTracks.map(function _callee2(item) {\n                var newItem;\n                return _regeneratorRuntime.async(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _context2.next = 2;\n                        return _regeneratorRuntime.awrap(_this.generateRandomPlaylist(item));\n\n                      case 2:\n                        newItem = _context2.sent;\n                        return _context2.abrupt(\"return\", newItem);\n\n                      case 4:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              })));\n\n            case 7:\n              randomPlaylist = _context3.sent;\n\n              _this.setState({\n                isFetching: false,\n                fiveTracks: sortedTracks,\n                randomTracksFromUsers: randomPlaylist\n              });\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"generateRandomPlaylist\", function _callee4(track) {\n      var usersWhoLiked, userArr, arrayUsersFaves, randomUser, userFaves, randomTrack, randomObj;\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(SC.get(\"/tracks/\".concat(track.id, \"/favoriters\"), {\n                limit: 1000,\n                linked_partitioning: 1\n              }));\n\n            case 2:\n              usersWhoLiked = _context4.sent;\n              userArr = usersWhoLiked.collection;\n              arrayUsersFaves = userArr.filter(function (user) {\n                return user.public_favorites_count > 0;\n              }); //sort users without playlists\n              //TODO::need to figure out a way to filter out user\n\n              randomUser = shuffle(arrayUsersFaves, 1)[0]; //get first list of random users\n\n              _context4.next = 8;\n              return _regeneratorRuntime.awrap(SC.get(\"/users/\".concat(randomUser.id, \"/favorites\"), {\n                limit: 1000,\n                linked_partitioning: 1\n              }));\n\n            case 8:\n              userFaves = _context4.sent;\n              randomTrack = shuffle(userFaves.collection, 1)[0];\n              randomObj = {\n                referral: track,\n                user: randomUser,\n                track: randomTrack\n              };\n              return _context4.abrupt(\"return\", randomObj);\n\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      SC.initialize({\n        client_id: scAppId,\n        redirect_uri: \"http://jambox.thatdudeartoo.com/callback.html\"\n      });\n    });\n\n    _this.state = {\n      isFetching: false,\n      doneFetching: false,\n      fiveTracks: null,\n      randomTracksFromUsers: null,\n      isModalOpen: true,\n      username: \"\",\n      user: null,\n      fetchErrorMsg: \"\",\n      currentTrack: \"\",\n      tracks: null\n    };\n    return _this;\n  } //function to resolve soundcloud user\n\n\n  _createClass(SCList, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          isFetching = _this$state.isFetching,\n          fiveTracks = _this$state.fiveTracks,\n          randomTracksFromUsers = _this$state.randomTracksFromUsers,\n          isModalOpen = _this$state.isModalOpen,\n          username = _this$state.username,\n          fetchErrorMsg = _this$state.fetchErrorMsg,\n          doneFetching = _this$state.doneFetching,\n          user = _this$state.user;\n      return __jsx(React.Fragment, null, fiveTracks && __jsx(SCPlayer, {\n        currentTrack: fiveTracks[0],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 24\n        }\n      }), __jsx(FetchUser, {\n        onSubmit: this.onSubmit,\n        isModalOpen: isModalOpen,\n        username: username,\n        saveToState: this.saveToState,\n        fetchErrorMsg: fetchErrorMsg,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }\n      }), user ? __jsx(User, {\n        user: user,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 17\n        }\n      }) : \"\", isFetching ? __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }\n      }, \"Fetching...\") : __jsx(React.Fragment, null, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }\n      }, fiveTracks ? fiveTracks.map(function (track) {\n        return __jsx(\"div\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 23\n          }\n        }, __jsx(\"p\", {\n          key: track.id,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 25\n          }\n        }, __jsx(\"strong\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 27\n          }\n        }, track.user.username), __jsx(\"br\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 27\n          }\n        }), \": \", track.title), __jsx(\"iframe\", {\n          width: \"100%\",\n          height: \"166\",\n          scrolling: \"no\",\n          frameborder: \"no\",\n          allow: \"autoplay\",\n          src: \"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/\".concat(track.id),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 25\n          }\n        }));\n      }) : \"\"), __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }\n      }, randomTracksFromUsers ? randomTracksFromUsers.map(function (item) {\n        return __jsx(\"div\", {\n          key: item.track.id,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 23\n          }\n        }, __jsx(\"p\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 25\n          }\n        }, __jsx(\"strong\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 27\n          }\n        }, \"User:\"), \" \", item.user.username), __jsx(\"p\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 25\n          }\n        }, \"Song: \", item.track.title), __jsx(\"p\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 25\n          }\n        }, \"Referral: \", item.referral.title), __jsx(\"iframe\", {\n          width: \"100%\",\n          height: \"166\",\n          scrolling: \"no\",\n          frameborder: \"no\",\n          allow: \"autoplay\",\n          src: \"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/\".concat(item.track.id),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 25\n          }\n        }));\n      }) : \"\")));\n    }\n  }]);\n\n  return SCList;\n}(Component);\n\nexport default SCList;","map":{"version":3,"sources":["/Users/jasonnolfi/lofisoul/components/SCList.js"],"names":["React","Component","styled","SCPlayer","FetchUser","User","scAppId","scUser","shuffle","SCList","user","SC","resolve","userToResolve","get","id","limit","linked_partitioning","response","collection","length","setState","fetchErrorMsg","initTrack","isModalOpen","errorMsg","status","message","e","target","name","value","preventDefault","soundCloudResolveUser","state","username","isFetching","sortedTracks","Promise","all","map","item","generateRandomPlaylist","newItem","randomPlaylist","fiveTracks","randomTracksFromUsers","track","usersWhoLiked","userArr","arrayUsersFaves","filter","public_favorites_count","randomUser","userFaves","randomTrack","randomObj","referral","initialize","client_id","redirect_uri","doneFetching","currentTrack","tracks","onSubmit","saveToState","title"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport SCPlayer from \"./SCPlayer\";\nimport FetchUser from \"./FetchUser\";\nimport User from \"./User\";\nimport { scAppId, scUser } from \"../config\";\nimport { shuffle } from \"../lib/utils\";\n\nclass SCList extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isFetching: false,\n      doneFetching: false,\n      fiveTracks: null,\n      randomTracksFromUsers: null,\n      isModalOpen: true,\n      username: \"\",\n      user: null,\n      fetchErrorMsg: \"\",\n      currentTrack: \"\",\n      tracks: null,\n    };\n  }\n\n  //function to resolve soundcloud user\n  soundCloudResolveUser = async (user) => {\n    try {\n      const userToResolve = await SC.resolve(`https://soundcloud.com/${user}`);\n      const response = await SC.get(`/users/${userToResolve.id}/favorites`, {\n        limit: 1000,\n        linked_partitioning: 1,\n      });\n\n      if (response.collection.length < 5) {\n        this.setState({\n          fetchErrorMsg: `You don't have enough likes. Try favoriting some tracks on soundcloud!`,\n        });\n        return;\n      }\n      this.initTrack(userToResolve);\n      this.setState({ user: userToResolve, isModalOpen: false });\n    } catch (e) {\n      const errorMsg =\n        e.status === 404 ? `Whoops! That user doesn't exist!` : e.message;\n      this.setState({ fetchErrorMsg: errorMsg });\n    }\n  };\n\n  //get SC user from form\n  saveToState = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  onSubmit = (e) => {\n    e.preventDefault();\n    this.soundCloudResolveUser(this.state.username);\n  };\n\n  initTrack = async (user) => {\n    //initialize SC\n    this.setState({ isFetching: true });\n\n    const response = await SC.get(`/users/${user.id}/favorites`, {\n      limit: 1000,\n      linked_partitioning: 1,\n    });\n\n    const sortedTracks = shuffle(response.collection, 5);\n\n    //run logic for getting random song based on users that liked 5 sorted tracks\n    let randomPlaylist = await Promise.all(\n      sortedTracks.map(async (item) => {\n        let newItem = await this.generateRandomPlaylist(item);\n        return newItem;\n      })\n    );\n\n    this.setState({\n      isFetching: false,\n      fiveTracks: sortedTracks,\n      randomTracksFromUsers: randomPlaylist,\n    });\n  };\n\n  generateRandomPlaylist = async (track) => {\n    const usersWhoLiked = await SC.get(`/tracks/${track.id}/favoriters`, {\n      limit: 1000,\n      linked_partitioning: 1,\n    });\n\n    let userArr = usersWhoLiked.collection;\n    const arrayUsersFaves = userArr.filter(\n      (user) => user.public_favorites_count > 0\n    );\n    //sort users without playlists\n    //TODO::need to figure out a way to filter out user\n    let randomUser = shuffle(arrayUsersFaves, 1)[0];\n    //get first list of random users\n    const userFaves = await SC.get(`/users/${randomUser.id}/favorites`, {\n      limit: 1000,\n      linked_partitioning: 1,\n    });\n    const randomTrack = shuffle(userFaves.collection, 1)[0];\n    const randomObj = {\n      referral: track,\n      user: randomUser,\n      track: randomTrack,\n    };\n    return randomObj;\n  };\n\n  componentDidMount = () => {\n    SC.initialize({\n      client_id: scAppId,\n      redirect_uri: \"http://jambox.thatdudeartoo.com/callback.html\",\n    });\n  };\n  render() {\n    const {\n      isFetching,\n      fiveTracks,\n      randomTracksFromUsers,\n      isModalOpen,\n      username,\n      fetchErrorMsg,\n      doneFetching,\n      user,\n    } = this.state;\n    return (\n      <>\n        {fiveTracks && <SCPlayer currentTrack={fiveTracks[0]} />}\n        <FetchUser\n          onSubmit={this.onSubmit}\n          isModalOpen={isModalOpen}\n          username={username}\n          saveToState={this.saveToState}\n          fetchErrorMsg={fetchErrorMsg}\n        />\n        {user ? <User user={user} /> : \"\"}\n        {isFetching ? (\n          <div>Fetching...</div>\n        ) : (\n          <>\n            <div>\n              {fiveTracks\n                ? fiveTracks.map((track) => {\n                    return (\n                      <div>\n                        <p key={track.id}>\n                          <strong>{track.user.username}</strong>\n                          <br />: {track.title}\n                        </p>\n                        <iframe\n                          width=\"100%\"\n                          height=\"166\"\n                          scrolling=\"no\"\n                          frameborder=\"no\"\n                          allow=\"autoplay\"\n                          src={`https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${track.id}`}\n                        ></iframe>\n                      </div>\n                    );\n                  })\n                : \"\"}\n            </div>\n            <div>\n              {randomTracksFromUsers\n                ? randomTracksFromUsers.map((item) => {\n                    return (\n                      <div key={item.track.id}>\n                        <p>\n                          <strong>User:</strong> {item.user.username}\n                        </p>\n                        <p>Song: {item.track.title}</p>\n                        <p>Referral: {item.referral.title}</p>\n                        <iframe\n                          width=\"100%\"\n                          height=\"166\"\n                          scrolling=\"no\"\n                          frameborder=\"no\"\n                          allow=\"autoplay\"\n                          src={`https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${item.track.id}`}\n                        ></iframe>\n                      </div>\n                    );\n                  })\n                : \"\"}\n            </div>\n          </>\n        )}\n      </>\n    );\n  }\n}\n\nexport default SCList;\n"]},"metadata":{},"sourceType":"module"}