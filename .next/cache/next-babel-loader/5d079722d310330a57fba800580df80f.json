{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/jasonnolfi/lofisoul/components/SCList.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport SCPlayer from './SCPlayer';\nimport FetchUser from './FetchUser';\nimport User from './User';\nimport { shuffle } from '../lib/utils';\n\nvar SCList = /*#__PURE__*/function (_Component) {\n  _inherits(SCList, _Component);\n\n  var _super = _createSuper(SCList);\n\n  function SCList() {\n    var _this;\n\n    _classCallCheck(this, SCList);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"soundCloudResolveUser\", function _callee(user) {\n      var userToResolve, response, errorMsg;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(SC.resolve(\"https://soundcloud.com/\".concat(user)));\n\n            case 3:\n              userToResolve = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(SC.get(\"/users/\".concat(userToResolve.id, \"/favorites\"), {\n                limit: 1000,\n                linked_partitioning: 1\n              }));\n\n            case 6:\n              response = _context.sent;\n\n              if (!(response.collection.length < 5)) {\n                _context.next = 10;\n                break;\n              }\n\n              _this.setState({\n                fetchErrorMsg: \"You don't have enough likes. Try favoriting some tracks on soundcloud!\"\n              });\n\n              return _context.abrupt(\"return\");\n\n            case 10:\n              _this.initTrack(userToResolve);\n\n              _this.setState({\n                user: userToResolve,\n                isModalOpen: false\n              });\n\n              _context.next = 18;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](0);\n              errorMsg = _context.t0.status === 404 ? \"Whoops! That user doesn't exist!\" : _context.t0.message;\n\n              _this.setState({\n                fetchErrorMsg: errorMsg\n              });\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 14]], Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"saveToState\", function (e) {\n      _this.setState(_defineProperty({}, e.target.name, e.target.value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", function (e) {\n      e.preventDefault();\n\n      _this.soundCloudResolveUser(_this.state.username);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"initTrack\", function _callee3(user) {\n      var response, sortedTracks, randomPlaylist;\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              //initialize SC\n              _this.setState({\n                isFetching: true\n              });\n\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(SC.get(\"/users/\".concat(user.id, \"/favorites\"), {\n                limit: 1000,\n                linked_partitioning: 1\n              }));\n\n            case 3:\n              response = _context3.sent;\n              sortedTracks = shuffle(response.collection, 5); //run logic for getting random song based on users that liked 5 sorted tracks\n\n              _context3.next = 7;\n              return _regeneratorRuntime.awrap(Promise.all(sortedTracks.map(function _callee2(item) {\n                var newItem;\n                return _regeneratorRuntime.async(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _context2.next = 2;\n                        return _regeneratorRuntime.awrap(_this.generateRandomPlaylist(item));\n\n                      case 2:\n                        newItem = _context2.sent;\n                        return _context2.abrupt(\"return\", newItem);\n\n                      case 4:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              })));\n\n            case 7:\n              randomPlaylist = _context3.sent;\n\n              _this.setState({\n                isFetching: false,\n                fiveTracks: sortedTracks,\n                randomTracksFromUsers: randomPlaylist\n              });\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"generateRandomPlaylist\", function _callee4(track) {\n      var usersWhoLiked, userArr, arrayUsersFaves, randomUser, userFaves, randomTrack, randomObj;\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(SC.get(\"/tracks/\".concat(track.id, \"/favoriters\"), {\n                limit: 1000,\n                linked_partitioning: 1\n              }));\n\n            case 2:\n              usersWhoLiked = _context4.sent;\n              userArr = usersWhoLiked.collection;\n              arrayUsersFaves = userArr.filter(function (user) {\n                return user.public_favorites_count > 0;\n              }); //sort users without playlists\n              //TODO::need to figure out a way to filter out user\n\n              randomUser = shuffle(arrayUsersFaves, 1)[0]; //get first list of random users\n\n              _context4.next = 8;\n              return _regeneratorRuntime.awrap(SC.get(\"/users/\".concat(randomUser.id, \"/favorites\"), {\n                limit: 1000,\n                linked_partitioning: 1\n              }));\n\n            case 8:\n              userFaves = _context4.sent;\n              randomTrack = shuffle(userFaves.collection, 1)[0];\n              randomObj = {\n                referral: track,\n                user: randomUser,\n                track: randomTrack\n              };\n              return _context4.abrupt(\"return\", randomObj);\n\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      SC.initialize({\n        client_id: process.env.SC_ID,\n        redirect_uri: 'http://jambox.thatdudeartoo.com/callback.html'\n      });\n      console.log(process.env.SC_ID);\n    });\n\n    _this.state = {\n      isFetching: false,\n      doneFetching: false,\n      fiveTracks: null,\n      randomTracksFromUsers: null,\n      isModalOpen: true,\n      username: '',\n      user: null,\n      fetchErrorMsg: '',\n      currentTrack: '',\n      tracks: null\n    };\n    return _this;\n  } //function to resolve soundcloud user\n\n\n  _createClass(SCList, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          isFetching = _this$state.isFetching,\n          fiveTracks = _this$state.fiveTracks,\n          randomTracksFromUsers = _this$state.randomTracksFromUsers,\n          isModalOpen = _this$state.isModalOpen,\n          username = _this$state.username,\n          fetchErrorMsg = _this$state.fetchErrorMsg,\n          doneFetching = _this$state.doneFetching,\n          user = _this$state.user;\n      return __jsx(React.Fragment, null, fiveTracks && __jsx(SCPlayer, {\n        currentTrack: fiveTracks[0],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 20\n        }\n      }), __jsx(FetchUser, {\n        onSubmit: this.onSubmit,\n        isModalOpen: isModalOpen,\n        username: username,\n        saveToState: this.saveToState,\n        fetchErrorMsg: fetchErrorMsg,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 5\n        }\n      }), user ? __jsx(User, {\n        user: user,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }\n      }) : '', isFetching ? __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 6\n        }\n      }, \"Fetching...\") : __jsx(React.Fragment, null, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 7\n        }\n      }, fiveTracks ? fiveTracks.map(function (track) {\n        return __jsx(\"div\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 12\n          }\n        }, __jsx(\"p\", {\n          key: track.id,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }\n        }, __jsx(\"strong\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 14\n          }\n        }, track.user.username), __jsx(\"br\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 14\n          }\n        }), \": \", track.title), __jsx(\"iframe\", {\n          width: \"100%\",\n          height: \"166\",\n          scrolling: \"no\",\n          frameborder: \"no\",\n          allow: \"autoplay\",\n          src: \"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/\".concat(track.id),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }\n        }));\n      }) : ''), __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 7\n        }\n      }, randomTracksFromUsers ? randomTracksFromUsers.map(function (item) {\n        return __jsx(\"div\", {\n          key: item.track.id,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 12\n          }\n        }, __jsx(\"p\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }\n        }, __jsx(\"strong\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 14\n          }\n        }, \"User:\"), ' ', item.user.username), __jsx(\"p\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }\n        }, \"Song: \", item.track.title), __jsx(\"p\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }\n        }, \"Referral:\", ' ', item.referral.title), __jsx(\"iframe\", {\n          width: \"100%\",\n          height: \"166\",\n          scrolling: \"no\",\n          frameborder: \"no\",\n          allow: \"autoplay\",\n          src: \"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/\".concat(item.track.id),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }\n        }));\n      }) : '')));\n    }\n  }]);\n\n  return SCList;\n}(Component);\n\nexport default SCList;","map":{"version":3,"sources":["/Users/jasonnolfi/lofisoul/components/SCList.js"],"names":["React","Component","styled","SCPlayer","FetchUser","User","shuffle","SCList","user","SC","resolve","userToResolve","get","id","limit","linked_partitioning","response","collection","length","setState","fetchErrorMsg","initTrack","isModalOpen","errorMsg","status","message","e","target","name","value","preventDefault","soundCloudResolveUser","state","username","isFetching","sortedTracks","Promise","all","map","item","generateRandomPlaylist","newItem","randomPlaylist","fiveTracks","randomTracksFromUsers","track","usersWhoLiked","userArr","arrayUsersFaves","filter","public_favorites_count","randomUser","userFaves","randomTrack","randomObj","referral","initialize","client_id","process","env","SC_ID","redirect_uri","console","log","doneFetching","currentTrack","tracks","onSubmit","saveToState","title"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport styled from 'styled-components';\nimport SCPlayer from './SCPlayer';\nimport FetchUser from './FetchUser';\nimport User from './User';\nimport {shuffle} from '../lib/utils';\n\nclass SCList extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tisFetching: false,\n\t\t\tdoneFetching: false,\n\t\t\tfiveTracks: null,\n\t\t\trandomTracksFromUsers: null,\n\t\t\tisModalOpen: true,\n\t\t\tusername: '',\n\t\t\tuser: null,\n\t\t\tfetchErrorMsg: '',\n\t\t\tcurrentTrack: '',\n\t\t\ttracks: null,\n\t\t};\n\t}\n\n\t//function to resolve soundcloud user\n\tsoundCloudResolveUser = async user => {\n\t\ttry {\n\t\t\tconst userToResolve = await SC.resolve(\n\t\t\t\t`https://soundcloud.com/${user}`,\n\t\t\t);\n\t\t\tconst response = await SC.get(\n\t\t\t\t`/users/${userToResolve.id}/favorites`,\n\t\t\t\t{\n\t\t\t\t\tlimit: 1000,\n\t\t\t\t\tlinked_partitioning: 1,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (response.collection.length < 5) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tfetchErrorMsg: `You don't have enough likes. Try favoriting some tracks on soundcloud!`,\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.initTrack(userToResolve);\n\t\t\tthis.setState({user: userToResolve, isModalOpen: false});\n\t\t} catch (e) {\n\t\t\tconst errorMsg =\n\t\t\t\te.status === 404\n\t\t\t\t\t? `Whoops! That user doesn't exist!`\n\t\t\t\t\t: e.message;\n\t\t\tthis.setState({fetchErrorMsg: errorMsg});\n\t\t}\n\t};\n\n\t//get SC user from form\n\tsaveToState = e => {\n\t\tthis.setState({[e.target.name]: e.target.value});\n\t};\n\n\tonSubmit = e => {\n\t\te.preventDefault();\n\t\tthis.soundCloudResolveUser(this.state.username);\n\t};\n\n\tinitTrack = async user => {\n\t\t//initialize SC\n\t\tthis.setState({isFetching: true});\n\n\t\tconst response = await SC.get(`/users/${user.id}/favorites`, {\n\t\t\tlimit: 1000,\n\t\t\tlinked_partitioning: 1,\n\t\t});\n\n\t\tconst sortedTracks = shuffle(response.collection, 5);\n\n\t\t//run logic for getting random song based on users that liked 5 sorted tracks\n\t\tlet randomPlaylist = await Promise.all(\n\t\t\tsortedTracks.map(async item => {\n\t\t\t\tlet newItem = await this.generateRandomPlaylist(item);\n\t\t\t\treturn newItem;\n\t\t\t}),\n\t\t);\n\n\t\tthis.setState({\n\t\t\tisFetching: false,\n\t\t\tfiveTracks: sortedTracks,\n\t\t\trandomTracksFromUsers: randomPlaylist,\n\t\t});\n\t};\n\n\tgenerateRandomPlaylist = async track => {\n\t\tconst usersWhoLiked = await SC.get(`/tracks/${track.id}/favoriters`, {\n\t\t\tlimit: 1000,\n\t\t\tlinked_partitioning: 1,\n\t\t});\n\n\t\tlet userArr = usersWhoLiked.collection;\n\t\tconst arrayUsersFaves = userArr.filter(\n\t\t\tuser => user.public_favorites_count > 0,\n\t\t);\n\t\t//sort users without playlists\n\t\t//TODO::need to figure out a way to filter out user\n\t\tlet randomUser = shuffle(arrayUsersFaves, 1)[0];\n\t\t//get first list of random users\n\t\tconst userFaves = await SC.get(`/users/${randomUser.id}/favorites`, {\n\t\t\tlimit: 1000,\n\t\t\tlinked_partitioning: 1,\n\t\t});\n\t\tconst randomTrack = shuffle(userFaves.collection, 1)[0];\n\t\tconst randomObj = {\n\t\t\treferral: track,\n\t\t\tuser: randomUser,\n\t\t\ttrack: randomTrack,\n\t\t};\n\t\treturn randomObj;\n\t};\n\n\tcomponentDidMount = () => {\n\t\tSC.initialize({\n\t\t\tclient_id: process.env.SC_ID,\n\t\t\tredirect_uri: 'http://jambox.thatdudeartoo.com/callback.html',\n\t\t});\n\n\t\tconsole.log(process.env.SC_ID);\n\t};\n\trender() {\n\t\tconst {\n\t\t\tisFetching,\n\t\t\tfiveTracks,\n\t\t\trandomTracksFromUsers,\n\t\t\tisModalOpen,\n\t\t\tusername,\n\t\t\tfetchErrorMsg,\n\t\t\tdoneFetching,\n\t\t\tuser,\n\t\t} = this.state;\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{fiveTracks && <SCPlayer currentTrack={fiveTracks[0]} />}\n\t\t\t\t<FetchUser\n\t\t\t\t\tonSubmit={this.onSubmit}\n\t\t\t\t\tisModalOpen={isModalOpen}\n\t\t\t\t\tusername={username}\n\t\t\t\t\tsaveToState={this.saveToState}\n\t\t\t\t\tfetchErrorMsg={fetchErrorMsg}\n\t\t\t\t/>\n\t\t\t\t{user ? <User user={user} /> : ''}\n\t\t\t\t{isFetching ? (\n\t\t\t\t\t<div>Fetching...</div>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t{fiveTracks\n\t\t\t\t\t\t\t\t? fiveTracks.map(track => {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<p key={track.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<strong>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{track.user.username}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</strong>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<br />: {track.title}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t<iframe\n\t\t\t\t\t\t\t\t\t\t\t\t\twidth=\"100%\"\n\t\t\t\t\t\t\t\t\t\t\t\t\theight=\"166\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tscrolling=\"no\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tframeborder=\"no\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tallow=\"autoplay\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={`https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${track.id}`}\n\t\t\t\t\t\t\t\t\t\t\t\t></iframe>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t\t: ''}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t{randomTracksFromUsers\n\t\t\t\t\t\t\t\t? randomTracksFromUsers.map(item => {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<div key={item.track.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<strong>User:</strong>{' '}\n\t\t\t\t\t\t\t\t\t\t\t\t\t{item.user.username}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t<p>Song: {item.track.title}</p>\n\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\tReferral:{' '}\n\t\t\t\t\t\t\t\t\t\t\t\t\t{item.referral.title}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t<iframe\n\t\t\t\t\t\t\t\t\t\t\t\t\twidth=\"100%\"\n\t\t\t\t\t\t\t\t\t\t\t\t\theight=\"166\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tscrolling=\"no\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tframeborder=\"no\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tallow=\"autoplay\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={`https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${item.track.id}`}\n\t\t\t\t\t\t\t\t\t\t\t\t></iframe>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t\t: ''}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default SCList;\n"]},"metadata":{},"sourceType":"module"}