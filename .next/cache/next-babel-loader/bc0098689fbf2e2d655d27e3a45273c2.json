{"ast":null,"code":"var _jsxFileName = \"/Users/jasonnolfi/lofisoul/components/SCList.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport SCPlayer from \"./SCPlayer\";\nimport FetchUser from \"./FetchUser\";\nimport User from \"./User\";\nimport { scAppId, scUser } from \"../config\";\nimport { shuffle } from \"../lib/utils\";\n\nclass SCList extends Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"soundCloudResolveUser\", async user => {\n      try {\n        const userToResolve = await SC.resolve(`https://soundcloud.com/${user}`);\n        const response = await SC.get(`/users/${userToResolve.id}/favorites`, {\n          limit: 1000,\n          linked_partitioning: 1\n        });\n\n        if (response.collection.length < 5) {\n          this.setState({\n            fetchErrorMsg: `You don't have enough likes. Try favoriting some tracks on soundcloud!`\n          });\n          return;\n        }\n\n        this.initTrack(userToResolve);\n        this.setState({\n          user: userToResolve,\n          isModalOpen: false\n        });\n      } catch (e) {\n        const errorMsg = e.status === 404 ? `Whoops! That user doesn't exist!` : e.message;\n        this.setState({\n          fetchErrorMsg: errorMsg\n        });\n      }\n    });\n\n    _defineProperty(this, \"saveToState\", e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"onSubmit\", e => {\n      e.preventDefault();\n      this.soundCloudResolveUser(this.state.username);\n    });\n\n    _defineProperty(this, \"initTrack\", async user => {\n      //initialize SC\n      this.setState({\n        isFetching: true\n      });\n      const response = await SC.get(`/users/${user.id}/favorites`, {\n        limit: 1000,\n        linked_partitioning: 1\n      });\n      const sortedTracks = shuffle(response.collection, 5); //run logic for getting random song based on users that liked 5 sorted tracks\n\n      let randomPlaylist = await Promise.all(sortedTracks.map(async item => {\n        let newItem = await this.generateRandomPlaylist(item);\n        return newItem;\n      }));\n      this.setState({\n        isFetching: false,\n        fiveTracks: sortedTracks,\n        randomTracksFromUsers: randomPlaylist\n      });\n    });\n\n    _defineProperty(this, \"generateRandomPlaylist\", async track => {\n      const usersWhoLiked = await SC.get(`/tracks/${track.id}/favoriters`, {\n        limit: 1000,\n        linked_partitioning: 1\n      });\n      let userArr = usersWhoLiked.collection;\n      const arrayUsersFaves = userArr.filter(user => user.public_favorites_count > 0); //sort users without playlists\n      //TODO::need to figure out a way to filter out user\n\n      let randomUser = shuffle(arrayUsersFaves, 1)[0]; //get first list of random users\n\n      const userFaves = await SC.get(`/users/${randomUser.id}/favorites`, {\n        limit: 1000,\n        linked_partitioning: 1\n      });\n      const randomTrack = shuffle(userFaves.collection, 1)[0];\n      const randomObj = {\n        referral: track,\n        user: randomUser,\n        track: randomTrack\n      };\n      return randomObj;\n    });\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      SC.initialize({\n        client_id: scAppId,\n        redirect_uri: \"http://jambox.thatdudeartoo.com/callback.html\"\n      });\n    });\n\n    this.state = {\n      isFetching: false,\n      doneFetching: false,\n      fiveTracks: null,\n      randomTracksFromUsers: null,\n      isModalOpen: true,\n      username: \"\",\n      user: null,\n      fetchErrorMsg: \"\",\n      currentTrack: \"\",\n      tracks: null\n    };\n  } //function to resolve soundcloud user\n\n\n  render() {\n    const {\n      isFetching,\n      fiveTracks,\n      randomTracksFromUsers,\n      isModalOpen,\n      username,\n      fetchErrorMsg,\n      doneFetching,\n      user\n    } = this.state;\n    return __jsx(React.Fragment, null, fiveTracks && __jsx(SCPlayer, {\n      currentTrack: fiveTracks[0],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 24\n      }\n    }), __jsx(FetchUser, {\n      onSubmit: this.onSubmit,\n      isModalOpen: isModalOpen,\n      username: username,\n      saveToState: this.saveToState,\n      fetchErrorMsg: fetchErrorMsg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    }), user ? __jsx(User, {\n      user: user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }\n    }) : \"\", isFetching ? __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    }, \"Fetching...\") : __jsx(React.Fragment, null, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    }, fiveTracks ? fiveTracks.map(track => {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 23\n        }\n      }, __jsx(\"p\", {\n        key: track.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 25\n        }\n      }, __jsx(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 27\n        }\n      }, track.user.username), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 27\n        }\n      }), \": \", track.title), __jsx(\"iframe\", {\n        width: \"100%\",\n        height: \"166\",\n        scrolling: \"no\",\n        frameborder: \"no\",\n        allow: \"autoplay\",\n        src: `https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${track.id}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 25\n        }\n      }));\n    }) : \"\"), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    }, randomTracksFromUsers ? randomTracksFromUsers.map(item => {\n      return __jsx(\"div\", {\n        key: item.track.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 23\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 25\n        }\n      }, __jsx(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 27\n        }\n      }, \"User:\"), \" \", item.user.username), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 25\n        }\n      }, \"Song: \", item.track.title), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 25\n        }\n      }, \"Referral: \", item.referral.title), __jsx(\"iframe\", {\n        width: \"100%\",\n        height: \"166\",\n        scrolling: \"no\",\n        frameborder: \"no\",\n        allow: \"autoplay\",\n        src: `https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${item.track.id}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 25\n        }\n      }));\n    }) : \"\")));\n  }\n\n}\n\nexport default SCList;","map":{"version":3,"sources":["/Users/jasonnolfi/lofisoul/components/SCList.js"],"names":["React","Component","styled","SCPlayer","FetchUser","User","scAppId","scUser","shuffle","SCList","constructor","user","userToResolve","SC","resolve","response","get","id","limit","linked_partitioning","collection","length","setState","fetchErrorMsg","initTrack","isModalOpen","e","errorMsg","status","message","target","name","value","preventDefault","soundCloudResolveUser","state","username","isFetching","sortedTracks","randomPlaylist","Promise","all","map","item","newItem","generateRandomPlaylist","fiveTracks","randomTracksFromUsers","track","usersWhoLiked","userArr","arrayUsersFaves","filter","public_favorites_count","randomUser","userFaves","randomTrack","randomObj","referral","initialize","client_id","redirect_uri","doneFetching","currentTrack","tracks","render","onSubmit","saveToState","title"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport SCPlayer from \"./SCPlayer\";\nimport FetchUser from \"./FetchUser\";\nimport User from \"./User\";\nimport { scAppId, scUser } from \"../config\";\nimport { shuffle } from \"../lib/utils\";\n\nclass SCList extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isFetching: false,\n      doneFetching: false,\n      fiveTracks: null,\n      randomTracksFromUsers: null,\n      isModalOpen: true,\n      username: \"\",\n      user: null,\n      fetchErrorMsg: \"\",\n      currentTrack: \"\",\n      tracks: null,\n    };\n  }\n\n  //function to resolve soundcloud user\n  soundCloudResolveUser = async (user) => {\n    try {\n      const userToResolve = await SC.resolve(`https://soundcloud.com/${user}`);\n      const response = await SC.get(`/users/${userToResolve.id}/favorites`, {\n        limit: 1000,\n        linked_partitioning: 1,\n      });\n\n      if (response.collection.length < 5) {\n        this.setState({\n          fetchErrorMsg: `You don't have enough likes. Try favoriting some tracks on soundcloud!`,\n        });\n        return;\n      }\n      this.initTrack(userToResolve);\n      this.setState({ user: userToResolve, isModalOpen: false });\n    } catch (e) {\n      const errorMsg =\n        e.status === 404 ? `Whoops! That user doesn't exist!` : e.message;\n      this.setState({ fetchErrorMsg: errorMsg });\n    }\n  };\n\n  //get SC user from form\n  saveToState = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  onSubmit = (e) => {\n    e.preventDefault();\n    this.soundCloudResolveUser(this.state.username);\n  };\n\n  initTrack = async (user) => {\n    //initialize SC\n    this.setState({ isFetching: true });\n\n    const response = await SC.get(`/users/${user.id}/favorites`, {\n      limit: 1000,\n      linked_partitioning: 1,\n    });\n\n    const sortedTracks = shuffle(response.collection, 5);\n\n    //run logic for getting random song based on users that liked 5 sorted tracks\n    let randomPlaylist = await Promise.all(\n      sortedTracks.map(async (item) => {\n        let newItem = await this.generateRandomPlaylist(item);\n        return newItem;\n      })\n    );\n\n    this.setState({\n      isFetching: false,\n      fiveTracks: sortedTracks,\n      randomTracksFromUsers: randomPlaylist,\n    });\n  };\n\n  generateRandomPlaylist = async (track) => {\n    const usersWhoLiked = await SC.get(`/tracks/${track.id}/favoriters`, {\n      limit: 1000,\n      linked_partitioning: 1,\n    });\n\n    let userArr = usersWhoLiked.collection;\n    const arrayUsersFaves = userArr.filter(\n      (user) => user.public_favorites_count > 0\n    );\n    //sort users without playlists\n    //TODO::need to figure out a way to filter out user\n    let randomUser = shuffle(arrayUsersFaves, 1)[0];\n    //get first list of random users\n    const userFaves = await SC.get(`/users/${randomUser.id}/favorites`, {\n      limit: 1000,\n      linked_partitioning: 1,\n    });\n    const randomTrack = shuffle(userFaves.collection, 1)[0];\n    const randomObj = {\n      referral: track,\n      user: randomUser,\n      track: randomTrack,\n    };\n    return randomObj;\n  };\n\n  componentDidMount = () => {\n    SC.initialize({\n      client_id: scAppId,\n      redirect_uri: \"http://jambox.thatdudeartoo.com/callback.html\",\n    });\n  };\n  render() {\n    const {\n      isFetching,\n      fiveTracks,\n      randomTracksFromUsers,\n      isModalOpen,\n      username,\n      fetchErrorMsg,\n      doneFetching,\n      user,\n    } = this.state;\n    return (\n      <>\n        {fiveTracks && <SCPlayer currentTrack={fiveTracks[0]} />}\n        <FetchUser\n          onSubmit={this.onSubmit}\n          isModalOpen={isModalOpen}\n          username={username}\n          saveToState={this.saveToState}\n          fetchErrorMsg={fetchErrorMsg}\n        />\n        {user ? <User user={user} /> : \"\"}\n        {isFetching ? (\n          <div>Fetching...</div>\n        ) : (\n          <>\n            <div>\n              {fiveTracks\n                ? fiveTracks.map((track) => {\n                    return (\n                      <div>\n                        <p key={track.id}>\n                          <strong>{track.user.username}</strong>\n                          <br />: {track.title}\n                        </p>\n                        <iframe\n                          width=\"100%\"\n                          height=\"166\"\n                          scrolling=\"no\"\n                          frameborder=\"no\"\n                          allow=\"autoplay\"\n                          src={`https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${track.id}`}\n                        ></iframe>\n                      </div>\n                    );\n                  })\n                : \"\"}\n            </div>\n            <div>\n              {randomTracksFromUsers\n                ? randomTracksFromUsers.map((item) => {\n                    return (\n                      <div key={item.track.id}>\n                        <p>\n                          <strong>User:</strong> {item.user.username}\n                        </p>\n                        <p>Song: {item.track.title}</p>\n                        <p>Referral: {item.referral.title}</p>\n                        <iframe\n                          width=\"100%\"\n                          height=\"166\"\n                          scrolling=\"no\"\n                          frameborder=\"no\"\n                          allow=\"autoplay\"\n                          src={`https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${item.track.id}`}\n                        ></iframe>\n                      </div>\n                    );\n                  })\n                : \"\"}\n            </div>\n          </>\n        )}\n      </>\n    );\n  }\n}\n\nexport default SCList;\n"]},"metadata":{},"sourceType":"module"}