{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/jasonnolfi/lofisoul/components/SCList.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport FetchUser from './FetchUser';\nimport { scAppId, scUser } from '../config';\nimport { shuffle } from '../lib/utils';\n\nvar SCList = /*#__PURE__*/function (_Component) {\n  _inherits(SCList, _Component);\n\n  var _super = _createSuper(SCList);\n\n  function SCList() {\n    var _this;\n\n    _classCallCheck(this, SCList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isFetching: false,\n      doneFetching: false,\n      fiveTracks: null,\n      randomTracksFromUsers: null,\n      isModalOpen: true,\n      username: '',\n      user: null,\n      fetchErrorMsg: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"soundCloudResolveUser\", function _callee(user) {\n      var userToResolve, errorMsg;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(SC.resolve(\"https://soundcloud.com/\".concat(user)));\n\n            case 3:\n              userToResolve = _context.sent;\n\n              _this.initTrack(userToResolve);\n\n              _this.setState({\n                user: userToResolve,\n                isModalOpen: false\n              });\n\n              _context.next = 12;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              errorMsg = _context.t0.status === 404 ? \"Whoops! That user doesn't exist!\" : _context.t0.message;\n\n              _this.setState({\n                fetchErrorMsg: errorMsg\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"saveToState\", function (e) {\n      _this.setState(_defineProperty({}, e.target.name, e.target.value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", function (e) {\n      e.preventDefault();\n\n      _this.soundCloudResolveUser(_this.state.username);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"initTrack\", function _callee3(user) {\n      var response, sortedTracks, randomPlaylist;\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              //initialize SC\n              _this.setState({\n                isFetching: true\n              });\n\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(SC.get(\"/users/\".concat(user.id, \"/favorites\"), {\n                limit: 1000,\n                linked_partitioning: 1\n              }));\n\n            case 3:\n              response = _context3.sent;\n              sortedTracks = shuffle(response.collection, 5); //run logic for getting random song based on users that liked 5 sorted tracks\n\n              _context3.next = 7;\n              return _regeneratorRuntime.awrap(Promise.all(sortedTracks.map(function _callee2(item) {\n                var newItem;\n                return _regeneratorRuntime.async(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _context2.next = 2;\n                        return _regeneratorRuntime.awrap(_this.generateRandomPlaylist(item));\n\n                      case 2:\n                        newItem = _context2.sent;\n                        return _context2.abrupt(\"return\", newItem);\n\n                      case 4:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              })));\n\n            case 7:\n              randomPlaylist = _context3.sent;\n\n              _this.setState({\n                isFetching: false,\n                fiveTracks: sortedTracks,\n                randomTracksFromUsers: randomPlaylist\n              });\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"generateRandomPlaylist\", function _callee4(track) {\n      var usersWhoLiked, userArr, arrayUsersFaves, randomUser, userFaves, randomTrack, randomObj;\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(SC.get(\"/tracks/\".concat(track.id, \"/favoriters\"), {\n                limit: 1000,\n                linked_partitioning: 1\n              }));\n\n            case 2:\n              usersWhoLiked = _context4.sent;\n              userArr = usersWhoLiked.collection;\n              arrayUsersFaves = userArr.filter(function (user) {\n                return user.public_favorites_count > 0;\n              }); //sort users without playlists\n              //TODO::need to figure out a way to filter out user\n\n              randomUser = shuffle(arrayUsersFaves, 1)[0]; //get first list of random users\n\n              _context4.next = 8;\n              return _regeneratorRuntime.awrap(SC.get(\"/users/\".concat(randomUser.id, \"/favorites\"), {\n                limit: 1000,\n                linked_partitioning: 1\n              }));\n\n            case 8:\n              userFaves = _context4.sent;\n              randomTrack = shuffle(userFaves.collection, 1)[0];\n              randomObj = {\n                referral: track,\n                user: randomUser,\n                track: randomTrack\n              };\n              return _context4.abrupt(\"return\", randomObj);\n\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      SC.initialize({\n        client_id: scAppId,\n        redirect_uri: 'http://jambox.thatdudeartoo.com/callback.html'\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(SCList, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          isFetching = _this$state.isFetching,\n          fiveTracks = _this$state.fiveTracks,\n          randomTracksFromUsers = _this$state.randomTracksFromUsers,\n          isModalOpen = _this$state.isModalOpen,\n          username = _this$state.username,\n          fetchErrorMsg = _this$state.fetchErrorMsg;\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }\n      }, __jsx(FetchUser, {\n        onSubmit: this.onSubmit,\n        isModalOpen: isModalOpen,\n        username: username,\n        saveToState: this.saveToState,\n        fetchErrorMsg: fetchErrorMsg,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }\n      }), isFetching ? __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 32\n        }\n      }, \"Fetching...\") : __jsx(React.Fragment, null, __jsx(\"div\", {\n        style: {\n          borderBottom: '1px solid gray',\n          paddingBottom: '20px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }\n      }, fiveTracks ? fiveTracks.map(function (track) {\n        return __jsx(\"div\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 32\n          }\n        }, __jsx(\"p\", {\n          key: track.id,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 37\n          }\n        }, __jsx(\"strong\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 55\n          }\n        }, track.user.username), __jsx(\"br\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 93\n          }\n        }), \": \", track.title), __jsx(\"iframe\", {\n          width: \"100%\",\n          height: \"166\",\n          scrolling: \"no\",\n          frameborder: \"no\",\n          allow: \"autoplay\",\n          src: \"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/\".concat(track.id),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }\n        }));\n      }) : ''), __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }\n      }, randomTracksFromUsers ? randomTracksFromUsers.map(function (item) {\n        return __jsx(\"div\", {\n          key: item.track.id,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 32\n          }\n        }, __jsx(\"p\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 29\n          }\n        }, __jsx(\"strong\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 32\n          }\n        }, \"User:\"), \" \", item.user.username), __jsx(\"p\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 29\n          }\n        }, \"Song: \", item.track.title), __jsx(\"p\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 29\n          }\n        }, \"Referral: \", item.referral.title), __jsx(\"iframe\", {\n          width: \"100%\",\n          height: \"166\",\n          scrolling: \"no\",\n          frameborder: \"no\",\n          allow: \"autoplay\",\n          src: \"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/\".concat(item.track.id),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 29\n          }\n        }));\n      }) : 'Error')));\n    }\n  }]);\n\n  return SCList;\n}(Component);\n\nexport default SCList;","map":{"version":3,"sources":["/Users/jasonnolfi/lofisoul/components/SCList.js"],"names":["React","Component","styled","FetchUser","scAppId","scUser","shuffle","SCList","isFetching","doneFetching","fiveTracks","randomTracksFromUsers","isModalOpen","username","user","fetchErrorMsg","SC","resolve","userToResolve","initTrack","setState","errorMsg","status","message","e","target","name","value","preventDefault","soundCloudResolveUser","state","get","id","limit","linked_partitioning","response","sortedTracks","collection","Promise","all","map","item","generateRandomPlaylist","newItem","randomPlaylist","track","usersWhoLiked","userArr","arrayUsersFaves","filter","public_favorites_count","randomUser","userFaves","randomTrack","randomObj","referral","initialize","client_id","redirect_uri","onSubmit","saveToState","borderBottom","paddingBottom","title"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport FetchUser from './FetchUser';\nimport {scAppId, scUser} from '../config';\nimport {shuffle} from '../lib/utils';\n\nclass SCList extends Component {\n    state = {\n        isFetching: false,\n        doneFetching: false,\n        fiveTracks: null,\n        randomTracksFromUsers: null,\n        isModalOpen: true,\n        username: '',\n        user:null,\n        fetchErrorMsg: ''\n    }\n\n    //function to resolve soundcloud user\n    soundCloudResolveUser = async (user) => {\n        try {\n            const userToResolve = await SC.resolve(`https://soundcloud.com/${user}`);\n            this.initTrack(userToResolve);\n            this.setState({user:userToResolve, isModalOpen:false});\n        } catch(e) {\n            const errorMsg = e.status===404 ? `Whoops! That user doesn't exist!` : e.message; \n            this.setState({fetchErrorMsg: errorMsg});  \n        }\n    }\n\n    //get SC user from form\n    saveToState = e => {\n        this.setState({[e.target.name]:e.target.value})\n    }\n\n    onSubmit = e => {\n        e.preventDefault();\n        this.soundCloudResolveUser(this.state.username);\n    }\n    \n    initTrack = async (user) => {\n        //initialize SC\n        this.setState({isFetching:true})\n        \n        const response = await SC.get(`/users/${user.id}/favorites`,{\n            limit:1000,\n            linked_partitioning:1\n        })\n\n        const sortedTracks = shuffle(response.collection,5);\n\n        //run logic for getting random song based on users that liked 5 sorted tracks\n        let randomPlaylist = await Promise.all(sortedTracks.map(async(item) => {\n            \n            let newItem = await this.generateRandomPlaylist(item);\n            return newItem\n        }))\n        \n        \n        \n        this.setState({isFetching:false, fiveTracks:sortedTracks, randomTracksFromUsers: randomPlaylist}); \n    }\n\n    generateRandomPlaylist = async (track) => {\n        const usersWhoLiked = await SC.get(`/tracks/${track.id}/favoriters`,{\n            limit: 1000,\n            linked_partitioning:1\n        })\n \n        let userArr = usersWhoLiked.collection;\n        const arrayUsersFaves = userArr.filter(user=> user.public_favorites_count>0)\n        //sort users without playlists\n        //TODO::need to figure out a way to filter out user\n        let randomUser = shuffle(arrayUsersFaves,1)[0];\n        //get first list of random users\n        const userFaves = await SC.get(`/users/${randomUser.id}/favorites`,{\n            limit: 1000,\n            linked_partitioning:1\n        });\n        const randomTrack = shuffle(userFaves.collection,1)[0];\n        const randomObj = {\n            referral: track,\n            user: randomUser,\n            track: randomTrack\n        }\n        return randomObj\n    }\n\n    componentDidMount = () => {\n        SC.initialize({\n            client_id: scAppId,\n            redirect_uri: 'http://jambox.thatdudeartoo.com/callback.html'\n        });\n\n    }\n    render() {\n        const {isFetching, fiveTracks, randomTracksFromUsers, isModalOpen, username, fetchErrorMsg} = this.state;\n        return (\n            <div>\n                <FetchUser onSubmit={this.onSubmit} isModalOpen={isModalOpen} username={username} saveToState={this.saveToState} fetchErrorMsg={fetchErrorMsg} />\n                {isFetching ? (<div>Fetching...</div>) : (\n                <>\n                <div style={{borderBottom: '1px solid gray', paddingBottom: '20px'}}>\n                    {(fiveTracks) ? fiveTracks.map(track=>{\n                        return <div><p key={track.id}><strong>{track.user.username}</strong><br/>: {track.title}</p>\n                        <iframe width=\"100%\" height=\"166\" scrolling=\"no\" frameborder=\"no\" allow=\"autoplay\" src={`https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${track.id}`}></iframe>\n                        </div>\n                    }) : ''}\n                </div>\n                <div>\n                    {(randomTracksFromUsers) ? randomTracksFromUsers.map(item=>{\n                        return <div key={item.track.id}>\n                            <p><strong>User:</strong> {item.user.username}</p>\n                            <p>Song: {item.track.title}</p>\n                            <p>Referral: {item.referral.title}</p>\n                            <iframe width=\"100%\" height=\"166\" scrolling=\"no\" frameborder=\"no\" allow=\"autoplay\" src={`https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${item.track.id}`}></iframe>\n                        </div>\n                    }) : 'Error'}\n                </div>\n                </>\n                )}\n            </div>\n        )\n    }\n}\n\nexport default SCList;"]},"metadata":{},"sourceType":"module"}