{"ast":null,"code":"var _jsxFileName = \"/Users/jasonnolfi/lofisoul/components/SCList.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport SC from 'soundcloud';\nimport { scAppId, scUser } from '../config';\nimport { shuffle } from '../lib/utils';\n\nclass SCList extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isFetching: false,\n      fiveTracks: null,\n      randomTracksFromUsers: null\n    });\n\n    _defineProperty(this, \"initTrack\", async () => {\n      //initialize SC\n      this.setState({\n        isFetching: true\n      });\n      const response = await SC.get(`/users/${scUser.id}/favorites`, {\n        limit: 1000,\n        linked_partitioning: 1\n      });\n      console.log(response.collection);\n      const sortedTracks = this.shuffle(response.collection, 5); //run logic for getting random song based on users that liked 5 sorted tracks\n\n      let randomPlaylist = await Promise.all(sortedTracks.map(async item => {\n        console.log(item);\n        let newItem = await this.generateRandomPlaylist(item);\n        return newItem;\n      }));\n      this.setState({\n        isFetching: false,\n        fiveTracks: sortedTracks,\n        randomTracksFromUsers: randomPlaylist\n      });\n      const track = response.collection[27];\n      const trackSrc = `${track.stream_url}?client_id=${scAppId}`;\n      this.audio = new Audio();\n      this.audio.crossOrigin = \"anonymous\";\n      this.audio.src = trackSrc;\n      this.context = new (window.AudioContext || window.webkitAudioContext)();\n      this.source = this.context.createMediaElementSource(this.audio);\n      this.analyser = this.context.createAnalyser();\n      this.source.connect(this.analyser);\n      this.analyser.connect(this.context.destination);\n      this.frequency_array = new Uint8Array(this.analyser.frequencyBinCount);\n    });\n\n    _defineProperty(this, \"generateRandomPlaylist\", async track => {\n      const usersWhoLiked = await SC.get(`/tracks/${track.id}/favoriters`, {\n        limit: 1000,\n        linked_partitioning: 1\n      });\n      console.log(usersWhoLiked);\n      let userArr = usersWhoLiked.collection;\n      const arrayUsersFaves = userArr.filter(user => user.public_favorites_count > 0); //sort users without playlists\n\n      const randomUser = this.shuffle(arrayUsersFaves, 1)[0]; //get first list of random users\n\n      const userFaves = await SC.get(`/users/${randomUser.id}/favorites`, {\n        limit: 1000,\n        linked_partitioning: 1\n      });\n      const randomTrack = this.shuffle(userFaves.collection, 1)[0];\n      const randomObj = {\n        referral: track,\n        user: randomUser,\n        track: randomTrack\n      };\n      console.log(randomObj);\n      return randomObj;\n    });\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      SC.initialize({\n        client_id: scAppId,\n        redirect_uri: 'http://jambox.thatdudeartoo.com/callback.html'\n      });\n      this.initTrack();\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, \"HOWDY!\");\n  }\n\n}\n\nexport default SCList;","map":{"version":3,"sources":["/Users/jasonnolfi/lofisoul/components/SCList.js"],"names":["React","Component","styled","SC","scAppId","scUser","shuffle","SCList","isFetching","fiveTracks","randomTracksFromUsers","setState","response","get","id","limit","linked_partitioning","console","log","collection","sortedTracks","randomPlaylist","Promise","all","map","item","newItem","generateRandomPlaylist","track","trackSrc","stream_url","audio","Audio","crossOrigin","src","context","window","AudioContext","webkitAudioContext","source","createMediaElementSource","analyser","createAnalyser","connect","destination","frequency_array","Uint8Array","frequencyBinCount","usersWhoLiked","userArr","arrayUsersFaves","filter","user","public_favorites_count","randomUser","userFaves","randomTrack","randomObj","referral","initialize","client_id","redirect_uri","initTrack","render"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAAQC,OAAR,EAAiBC,MAAjB,QAA8B,WAA9B;AACA,SAAQC,OAAR,QAAsB,cAAtB;;AAEA,MAAMC,MAAN,SAAqBN,SAArB,CAA+B;AAAA;AAAA;;AAAA,mCACnB;AACJO,MAAAA,UAAU,EAAE,KADR;AAEJC,MAAAA,UAAU,EAAE,IAFR;AAGJC,MAAAA,qBAAqB,EAAE;AAHnB,KADmB;;AAAA,uCAMf,YAAY;AACpB;AACA,WAAKC,QAAL,CAAc;AAACH,QAAAA,UAAU,EAAC;AAAZ,OAAd;AAEA,YAAMI,QAAQ,GAAG,MAAMT,EAAE,CAACU,GAAH,CAAQ,UAASR,MAAM,CAACS,EAAG,YAA3B,EAAuC;AAC1DC,QAAAA,KAAK,EAAC,IADoD;AAE1DC,QAAAA,mBAAmB,EAAC;AAFsC,OAAvC,CAAvB;AAIAC,MAAAA,OAAO,CAACC,GAAR,CAAYN,QAAQ,CAACO,UAArB;AACA,YAAMC,YAAY,GAAG,KAAKd,OAAL,CAAaM,QAAQ,CAACO,UAAtB,EAAiC,CAAjC,CAArB,CAToB,CAWpB;;AACA,UAAIE,cAAc,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYH,YAAY,CAACI,GAAb,CAAiB,MAAMC,IAAN,IAAe;AACnER,QAAAA,OAAO,CAACC,GAAR,CAAYO,IAAZ;AACA,YAAIC,OAAO,GAAG,MAAM,KAAKC,sBAAL,CAA4BF,IAA5B,CAApB;AACA,eAAOC,OAAP;AACH,OAJsC,CAAZ,CAA3B;AAQA,WAAKf,QAAL,CAAc;AAACH,QAAAA,UAAU,EAAC,KAAZ;AAAmBC,QAAAA,UAAU,EAACW,YAA9B;AAA4CV,QAAAA,qBAAqB,EAAEW;AAAnE,OAAd;AACA,YAAMO,KAAK,GAAGhB,QAAQ,CAACO,UAAT,CAAoB,EAApB,CAAd;AACA,YAAMU,QAAQ,GAAI,GAAED,KAAK,CAACE,UAAW,cAAa1B,OAAQ,EAA1D;AACA,WAAK2B,KAAL,GAAa,IAAIC,KAAJ,EAAb;AACA,WAAKD,KAAL,CAAWE,WAAX,GAAyB,WAAzB;AACA,WAAKF,KAAL,CAAWG,GAAX,GAAiBL,QAAjB;AACA,WAAKM,OAAL,GAAe,KAAKC,MAAM,CAACC,YAAP,IAAuBD,MAAM,CAACE,kBAAnC,GAAf;AACA,WAAKC,MAAL,GAAc,KAAKJ,OAAL,CAAaK,wBAAb,CAAsC,KAAKT,KAA3C,CAAd;AAEA,WAAKU,QAAL,GAAgB,KAAKN,OAAL,CAAaO,cAAb,EAAhB;AACA,WAAKH,MAAL,CAAYI,OAAZ,CAAoB,KAAKF,QAAzB;AACA,WAAKA,QAAL,CAAcE,OAAd,CAAsB,KAAKR,OAAL,CAAaS,WAAnC;AACA,WAAKC,eAAL,GAAuB,IAAIC,UAAJ,CAAe,KAAKL,QAAL,CAAcM,iBAA7B,CAAvB;AACH,KAvC0B;;AAAA,oDAyCF,MAAOnB,KAAP,IAAiB;AACtC,YAAMoB,aAAa,GAAG,MAAM7C,EAAE,CAACU,GAAH,CAAQ,WAAUe,KAAK,CAACd,EAAG,aAA3B,EAAwC;AAChEC,QAAAA,KAAK,EAAE,IADyD;AAEhEC,QAAAA,mBAAmB,EAAC;AAF4C,OAAxC,CAA5B;AAIAC,MAAAA,OAAO,CAACC,GAAR,CAAY8B,aAAZ;AACA,UAAIC,OAAO,GAAGD,aAAa,CAAC7B,UAA5B;AACA,YAAM+B,eAAe,GAAGD,OAAO,CAACE,MAAR,CAAeC,IAAI,IAAGA,IAAI,CAACC,sBAAL,GAA4B,CAAlD,CAAxB,CAPsC,CAQtC;;AACA,YAAMC,UAAU,GAAG,KAAKhD,OAAL,CAAa4C,eAAb,EAA6B,CAA7B,EAAgC,CAAhC,CAAnB,CATsC,CAUtC;;AACA,YAAMK,SAAS,GAAG,MAAMpD,EAAE,CAACU,GAAH,CAAQ,UAASyC,UAAU,CAACxC,EAAG,YAA/B,EAA2C;AAC/DC,QAAAA,KAAK,EAAE,IADwD;AAE/DC,QAAAA,mBAAmB,EAAC;AAF2C,OAA3C,CAAxB;AAIA,YAAMwC,WAAW,GAAG,KAAKlD,OAAL,CAAaiD,SAAS,CAACpC,UAAvB,EAAkC,CAAlC,EAAqC,CAArC,CAApB;AACA,YAAMsC,SAAS,GAAG;AACdC,QAAAA,QAAQ,EAAE9B,KADI;AAEdwB,QAAAA,IAAI,EAAEE,UAFQ;AAGd1B,QAAAA,KAAK,EAAE4B;AAHO,OAAlB;AAKAvC,MAAAA,OAAO,CAACC,GAAR,CAAYuC,SAAZ;AACA,aAAOA,SAAP;AACH,KAhE0B;;AAAA,+CAkEP,MAAM;AACtBtD,MAAAA,EAAE,CAACwD,UAAH,CAAc;AACVC,QAAAA,SAAS,EAAExD,OADD;AAEVyD,QAAAA,YAAY,EAAE;AAFJ,OAAd;AAIA,WAAKC,SAAL;AACH,KAxE0B;AAAA;;AAyE3BC,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ;AAKH;;AA/E0B;;AAkF/B,eAAexD,MAAf","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport SC from 'soundcloud';\nimport {scAppId, scUser} from '../config';\nimport {shuffle} from '../lib/utils';\n\nclass SCList extends Component {\n    state = {\n        isFetching: false,\n        fiveTracks: null,\n        randomTracksFromUsers: null\n    }\n    initTrack = async () => {\n        //initialize SC\n        this.setState({isFetching:true})\n        \n        const response = await SC.get(`/users/${scUser.id}/favorites`,{\n            limit:1000,\n            linked_partitioning:1\n        })\n        console.log(response.collection);\n        const sortedTracks = this.shuffle(response.collection,5);\n\n        //run logic for getting random song based on users that liked 5 sorted tracks\n        let randomPlaylist = await Promise.all(sortedTracks.map(async(item) => {\n            console.log(item)\n            let newItem = await this.generateRandomPlaylist(item);\n            return newItem\n        }))\n        \n        \n        \n        this.setState({isFetching:false, fiveTracks:sortedTracks, randomTracksFromUsers: randomPlaylist})\n        const track = response.collection[27];\n        const trackSrc = `${track.stream_url}?client_id=${scAppId}`;\n        this.audio = new Audio();\n        this.audio.crossOrigin = \"anonymous\";\n        this.audio.src = trackSrc;\n        this.context = new (window.AudioContext || window.webkitAudioContext)();\n        this.source = this.context.createMediaElementSource(this.audio);\n\n        this.analyser = this.context.createAnalyser();\n        this.source.connect(this.analyser);\n        this.analyser.connect(this.context.destination);\n        this.frequency_array = new Uint8Array(this.analyser.frequencyBinCount);        \n    }\n\n    generateRandomPlaylist = async (track) => {\n        const usersWhoLiked = await SC.get(`/tracks/${track.id}/favoriters`,{\n            limit: 1000,\n            linked_partitioning:1\n        })\n        console.log(usersWhoLiked)\n        let userArr = usersWhoLiked.collection;\n        const arrayUsersFaves = userArr.filter(user=> user.public_favorites_count>0)\n        //sort users without playlists\n        const randomUser = this.shuffle(arrayUsersFaves,1)[0];\n        //get first list of random users\n        const userFaves = await SC.get(`/users/${randomUser.id}/favorites`,{\n            limit: 1000,\n            linked_partitioning:1\n        });\n        const randomTrack = this.shuffle(userFaves.collection,1)[0];\n        const randomObj = {\n            referral: track,\n            user: randomUser,\n            track: randomTrack\n        }\n        console.log(randomObj)\n        return randomObj\n    }\n\n    componentDidMount = () => {\n        SC.initialize({\n            client_id: scAppId,\n            redirect_uri: 'http://jambox.thatdudeartoo.com/callback.html'\n        });\n        this.initTrack();\n    }\n    render() {\n        return (\n            <div>\n                HOWDY!\n            </div>\n        );\n    }\n}\n\nexport default SCList;"]},"metadata":{},"sourceType":"module"}