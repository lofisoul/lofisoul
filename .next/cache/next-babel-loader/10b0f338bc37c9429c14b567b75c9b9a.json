{"ast":null,"code":"var _jsxFileName = \"/Users/jasonnolfi/lofisoul/components/SCList.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport SCPlayer from './SCPlayer';\nimport FetchUser from './FetchUser';\nimport User from './User';\nimport { scAppId, scUser } from '../config';\nimport { shuffle } from '../lib/utils';\n\nclass SCList extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isFetching: false,\n      doneFetching: false,\n      fiveTracks: null,\n      randomTracksFromUsers: null,\n      isModalOpen: true,\n      username: '',\n      user: null,\n      fetchErrorMsg: ''\n    });\n\n    _defineProperty(this, \"soundCloudResolveUser\", async user => {\n      try {\n        const userToResolve = await SC.resolve(`https://soundcloud.com/${user}`);\n        const response = await SC.get(`/users/${userToResolve.id}/favorites`, {\n          limit: 1000,\n          linked_partitioning: 1\n        });\n\n        if (response.collection.length < 5) {\n          this.setState({\n            fetchErrorMsg: `You don't have enough likes. Try favoriting some tracks on soundcloud!`\n          });\n          return;\n        }\n\n        this.initTrack(userToResolve);\n        this.setState({\n          user: userToResolve,\n          isModalOpen: false\n        });\n      } catch (e) {\n        const errorMsg = e.status === 404 ? `Whoops! That user doesn't exist!` : e.message;\n        this.setState({\n          fetchErrorMsg: errorMsg\n        });\n      }\n    });\n\n    _defineProperty(this, \"saveToState\", e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"onSubmit\", e => {\n      e.preventDefault();\n      this.soundCloudResolveUser(this.state.username);\n    });\n\n    _defineProperty(this, \"initTrack\", async user => {\n      //initialize SC\n      this.setState({\n        isFetching: true\n      });\n      const response = await SC.get(`/users/${user.id}/favorites`, {\n        limit: 1000,\n        linked_partitioning: 1\n      });\n      const sortedTracks = shuffle(response.collection, 5); //run logic for getting random song based on users that liked 5 sorted tracks\n\n      let randomPlaylist = await Promise.all(sortedTracks.map(async item => {\n        let newItem = await this.generateRandomPlaylist(item);\n        return newItem;\n      }));\n      this.setState({\n        isFetching: false,\n        fiveTracks: sortedTracks,\n        randomTracksFromUsers: randomPlaylist\n      });\n    });\n\n    _defineProperty(this, \"generateRandomPlaylist\", async track => {\n      const usersWhoLiked = await SC.get(`/tracks/${track.id}/favoriters`, {\n        limit: 1000,\n        linked_partitioning: 1\n      });\n      let userArr = usersWhoLiked.collection;\n      const arrayUsersFaves = userArr.filter(user => user.public_favorites_count > 0); //sort users without playlists\n      //TODO::need to figure out a way to filter out user\n\n      let randomUser = shuffle(arrayUsersFaves, 1)[0]; //get first list of random users\n\n      const userFaves = await SC.get(`/users/${randomUser.id}/favorites`, {\n        limit: 1000,\n        linked_partitioning: 1\n      });\n      const randomTrack = shuffle(userFaves.collection, 1)[0];\n      const randomObj = {\n        referral: track,\n        user: randomUser,\n        track: randomTrack\n      };\n      return randomObj;\n    });\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      SC.initialize({\n        client_id: scAppId,\n        redirect_uri: 'http://jambox.thatdudeartoo.com/callback.html'\n      });\n    });\n  }\n\n  render() {\n    const {\n      isFetching,\n      fiveTracks,\n      randomTracksFromUsers,\n      isModalOpen,\n      username,\n      fetchErrorMsg,\n      doneFetching,\n      user\n    } = this.state;\n    return __jsx(React.Fragment, null, fiveTracks && __jsx(SCPlayer, {\n      currentTrack: fiveTracks[0],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 32\n      }\n    }), __jsx(FetchUser, {\n      onSubmit: this.onSubmit,\n      isModalOpen: isModalOpen,\n      username: username,\n      saveToState: this.saveToState,\n      fetchErrorMsg: fetchErrorMsg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }), user ? __jsx(User, {\n      user: user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 27\n      }\n    }) : '', isFetching ? __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 32\n      }\n    }, \"Fetching...\") : __jsx(React.Fragment, null, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }\n    }, fiveTracks ? fiveTracks.map(track => {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 32\n        }\n      }, __jsx(\"p\", {\n        key: track.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 37\n        }\n      }, __jsx(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 55\n        }\n      }, track.user.username), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 93\n        }\n      }), \": \", track.title), __jsx(\"iframe\", {\n        width: \"100%\",\n        height: \"166\",\n        scrolling: \"no\",\n        frameborder: \"no\",\n        allow: \"autoplay\",\n        src: `https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${track.id}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }\n      }));\n    }) : ''), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    }, randomTracksFromUsers ? randomTracksFromUsers.map(item => {\n      return __jsx(\"div\", {\n        key: item.track.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 32\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 29\n        }\n      }, __jsx(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 32\n        }\n      }, \"User:\"), \" \", item.user.username), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 29\n        }\n      }, \"Song: \", item.track.title), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 29\n        }\n      }, \"Referral: \", item.referral.title), __jsx(\"iframe\", {\n        width: \"100%\",\n        height: \"166\",\n        scrolling: \"no\",\n        frameborder: \"no\",\n        allow: \"autoplay\",\n        src: `https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${item.track.id}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 29\n        }\n      }));\n    }) : '')));\n  }\n\n}\n\nexport default SCList;","map":{"version":3,"sources":["/Users/jasonnolfi/lofisoul/components/SCList.js"],"names":["React","Component","styled","SCPlayer","FetchUser","User","scAppId","scUser","shuffle","SCList","isFetching","doneFetching","fiveTracks","randomTracksFromUsers","isModalOpen","username","user","fetchErrorMsg","userToResolve","SC","resolve","response","get","id","limit","linked_partitioning","collection","length","setState","initTrack","e","errorMsg","status","message","target","name","value","preventDefault","soundCloudResolveUser","state","sortedTracks","randomPlaylist","Promise","all","map","item","newItem","generateRandomPlaylist","track","usersWhoLiked","userArr","arrayUsersFaves","filter","public_favorites_count","randomUser","userFaves","randomTrack","randomObj","referral","initialize","client_id","redirect_uri","render","onSubmit","saveToState","title"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport SCPlayer from './SCPlayer'\nimport FetchUser from './FetchUser';\nimport User from './User';\nimport {scAppId, scUser} from '../config';\nimport {shuffle} from '../lib/utils';\n\nclass SCList extends Component {\n    state = {\n        isFetching: false,\n        doneFetching: false,\n        fiveTracks: null,\n        randomTracksFromUsers: null,\n        isModalOpen: true,\n        username: '',\n        user:null,\n        fetchErrorMsg: ''\n    }\n\n    //function to resolve soundcloud user\n    soundCloudResolveUser = async (user) => {\n        try {\n            const userToResolve = await SC.resolve(`https://soundcloud.com/${user}`);\n            const response = await SC.get(`/users/${userToResolve.id}/favorites`,{\n                limit:1000,\n                linked_partitioning:1\n            })\n\n            if(response.collection.length<5) {\n                this.setState({fetchErrorMsg: `You don't have enough likes. Try favoriting some tracks on soundcloud!`});\n                return\n            }\n            this.initTrack(userToResolve);\n            this.setState({user:userToResolve, isModalOpen:false});\n        } catch(e) {\n            const errorMsg = e.status===404 ? `Whoops! That user doesn't exist!` : e.message; \n            this.setState({fetchErrorMsg: errorMsg});  \n        }\n    }\n\n    //get SC user from form\n    saveToState = e => {\n        this.setState({[e.target.name]:e.target.value})\n    }\n\n    onSubmit = e => {\n        e.preventDefault();\n        this.soundCloudResolveUser(this.state.username);\n    }\n    \n    initTrack = async (user) => {\n        //initialize SC\n        this.setState({isFetching:true})\n        \n        const response = await SC.get(`/users/${user.id}/favorites`,{\n            limit:1000,\n            linked_partitioning:1\n        })\n\n        const sortedTracks = shuffle(response.collection,5);\n\n        //run logic for getting random song based on users that liked 5 sorted tracks\n        let randomPlaylist = await Promise.all(sortedTracks.map(async(item) => {\n            \n            let newItem = await this.generateRandomPlaylist(item);\n            return newItem\n        }))\n        \n        \n        \n        this.setState({isFetching:false, fiveTracks:sortedTracks, randomTracksFromUsers: randomPlaylist}); \n    }\n\n    generateRandomPlaylist = async (track) => {\n        const usersWhoLiked = await SC.get(`/tracks/${track.id}/favoriters`,{\n            limit: 1000,\n            linked_partitioning:1\n        })\n \n        let userArr = usersWhoLiked.collection;\n        const arrayUsersFaves = userArr.filter(user=> user.public_favorites_count>0)\n        //sort users without playlists\n        //TODO::need to figure out a way to filter out user\n        let randomUser = shuffle(arrayUsersFaves,1)[0];\n        //get first list of random users\n        const userFaves = await SC.get(`/users/${randomUser.id}/favorites`,{\n            limit: 1000,\n            linked_partitioning:1\n        });\n        const randomTrack = shuffle(userFaves.collection,1)[0];\n        const randomObj = {\n            referral: track,\n            user: randomUser,\n            track: randomTrack\n        }\n        return randomObj\n    }\n\n    componentDidMount = () => {\n        SC.initialize({\n            client_id: scAppId,\n            redirect_uri: 'http://jambox.thatdudeartoo.com/callback.html'\n        });\n\n    }\n    render() {\n        const {isFetching, fiveTracks, randomTracksFromUsers, isModalOpen, username, fetchErrorMsg,doneFetching, user} = this.state;\n        return (\n            <>\n                {fiveTracks && <SCPlayer currentTrack={fiveTracks[0]} />}\n                <FetchUser onSubmit={this.onSubmit} isModalOpen={isModalOpen} username={username} saveToState={this.saveToState} fetchErrorMsg={fetchErrorMsg} />\n                {(user) ? <User user={user} /> : ''}\n                {isFetching ? (<div>Fetching...</div>) : (\n                <>\n                <div>\n                    {(fiveTracks) ? fiveTracks.map(track=>{\n                        return <div><p key={track.id}><strong>{track.user.username}</strong><br/>: {track.title}</p>\n                        <iframe width=\"100%\" height=\"166\" scrolling=\"no\" frameborder=\"no\" allow=\"autoplay\" src={`https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${track.id}`}></iframe>\n                        </div>\n                    }) : ''}\n                </div>\n                <div>\n                    {(randomTracksFromUsers) ? randomTracksFromUsers.map(item=>{\n                        return <div key={item.track.id}>\n                            <p><strong>User:</strong> {item.user.username}</p>\n                            <p>Song: {item.track.title}</p>\n                            <p>Referral: {item.referral.title}</p>\n                            <iframe width=\"100%\" height=\"166\" scrolling=\"no\" frameborder=\"no\" allow=\"autoplay\" src={`https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${item.track.id}`}></iframe>\n                        </div>\n                    }) : ''}\n                </div>\n                </>\n                )}\n            </>\n        )\n    }\n}\n\nexport default SCList;"]},"metadata":{},"sourceType":"module"}