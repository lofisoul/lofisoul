{"version":3,"file":"static/webpack/static/development/pages/index.js.c35d6e2a3d9e171b54fc.hot-update.js","sources":["webpack:///./components/SCList.js"],"sourcesContent":["import React, {Component} from 'react';\nimport styled from 'styled-components';\nimport SCPlayer from './SCPlayer';\nimport FetchUser from './FetchUser';\nimport User from './User';\nimport {shuffle} from '../lib/utils';\n\nclass SCList extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tisFetching: false,\n\t\t\tdoneFetching: false,\n\t\t\tfiveTracks: null,\n\t\t\trandomTracksFromUsers: null,\n\t\t\tisModalOpen: true,\n\t\t\tusername: '',\n\t\t\tuser: null,\n\t\t\tfetchErrorMsg: '',\n\t\t\tcurrentTrack: '',\n\t\t\ttracks: null,\n\t\t};\n\t}\n\n\t//function to resolve soundcloud user\n\tsoundCloudResolveUser = async user => {\n\t\ttry {\n\t\t\tconst userToResolve = await SC.resolve(\n\t\t\t\t`https://soundcloud.com/${user}`,\n\t\t\t);\n\t\t\tconst response = await SC.get(\n\t\t\t\t`/users/${userToResolve.id}/favorites`,\n\t\t\t\t{\n\t\t\t\t\tlimit: 1000,\n\t\t\t\t\tlinked_partitioning: 1,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (response.collection.length < 5) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tfetchErrorMsg: `You don't have enough likes. Try favoriting some tracks on soundcloud!`,\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.initTrack(userToResolve);\n\t\t\tthis.setState({user: userToResolve, isModalOpen: false});\n\t\t} catch (e) {\n\t\t\tconst errorMsg =\n\t\t\t\te.status === 404\n\t\t\t\t\t? `Whoops! That user doesn't exist!`\n\t\t\t\t\t: e.message;\n\t\t\tthis.setState({fetchErrorMsg: errorMsg});\n\t\t}\n\t};\n\n\t//get SC user from form\n\tsaveToState = e => {\n\t\tthis.setState({[e.target.name]: e.target.value});\n\t};\n\n\tonSubmit = e => {\n\t\te.preventDefault();\n\t\tthis.soundCloudResolveUser(this.state.username);\n\t};\n\n\tinitTrack = async user => {\n\t\t//initialize SC\n\t\tthis.setState({isFetching: true});\n\n\t\tconst response = await SC.get(`/users/${user.id}/favorites`, {\n\t\t\tlimit: 1000,\n\t\t\tlinked_partitioning: 1,\n\t\t});\n\n\t\tconst sortedTracks = shuffle(response.collection, 5);\n\n\t\t//run logic for getting random song based on users that liked 5 sorted tracks\n\t\tlet randomPlaylist = await Promise.all(\n\t\t\tsortedTracks.map(async item => {\n\t\t\t\tlet newItem = await this.generateRandomPlaylist(item);\n\t\t\t\treturn newItem;\n\t\t\t}),\n\t\t);\n\n\t\tthis.setState({\n\t\t\tisFetching: false,\n\t\t\tfiveTracks: sortedTracks,\n\t\t\trandomTracksFromUsers: randomPlaylist,\n\t\t});\n\t};\n\n\tgenerateRandomPlaylist = async track => {\n\t\tconst usersWhoLiked = await SC.get(`/tracks/${track.id}/favoriters`, {\n\t\t\tlimit: 1000,\n\t\t\tlinked_partitioning: 1,\n\t\t});\n\n\t\tlet userArr = usersWhoLiked.collection;\n\t\tconst arrayUsersFaves = userArr.filter(\n\t\t\tuser => user.public_favorites_count > 0,\n\t\t);\n\t\t//sort users without playlists\n\t\t//TODO::need to figure out a way to filter out user\n\t\tlet randomUser = shuffle(arrayUsersFaves, 1)[0];\n\t\t//get first list of random users\n\t\tconst userFaves = await SC.get(`/users/${randomUser.id}/favorites`, {\n\t\t\tlimit: 1000,\n\t\t\tlinked_partitioning: 1,\n\t\t});\n\t\tconst randomTrack = shuffle(userFaves.collection, 1)[0];\n\t\tconst randomObj = {\n\t\t\treferral: track,\n\t\t\tuser: randomUser,\n\t\t\ttrack: randomTrack,\n\t\t};\n\t\treturn randomObj;\n\t};\n\n\tcomponentDidMount = () => {\n\t\tconsole.log(process.env.SC_ID);\n\t\tSC.initialize({\n\t\t\tclient_id: process.env.SC_ID,\n\t\t\tredirect_uri: 'http://jambox.thatdudeartoo.com/callback.html',\n\t\t});\n\t};\n\trender() {\n\t\tconst {\n\t\t\tisFetching,\n\t\t\tfiveTracks,\n\t\t\trandomTracksFromUsers,\n\t\t\tisModalOpen,\n\t\t\tusername,\n\t\t\tfetchErrorMsg,\n\t\t\tdoneFetching,\n\t\t\tuser,\n\t\t} = this.state;\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{fiveTracks && <SCPlayer currentTrack={fiveTracks[0]} />}\n\t\t\t\t<FetchUser\n\t\t\t\t\tonSubmit={this.onSubmit}\n\t\t\t\t\tisModalOpen={isModalOpen}\n\t\t\t\t\tusername={username}\n\t\t\t\t\tsaveToState={this.saveToState}\n\t\t\t\t\tfetchErrorMsg={fetchErrorMsg}\n\t\t\t\t/>\n\t\t\t\t{user ? <User user={user} /> : ''}\n\t\t\t\t{isFetching ? (\n\t\t\t\t\t<div>Fetching...</div>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t{fiveTracks\n\t\t\t\t\t\t\t\t? fiveTracks.map(track => {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<p key={track.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<strong>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{track.user.username}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</strong>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<br />: {track.title}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t<iframe\n\t\t\t\t\t\t\t\t\t\t\t\t\twidth=\"100%\"\n\t\t\t\t\t\t\t\t\t\t\t\t\theight=\"166\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tscrolling=\"no\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tframeborder=\"no\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tallow=\"autoplay\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={`https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${track.id}`}\n\t\t\t\t\t\t\t\t\t\t\t\t></iframe>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t\t: ''}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t{randomTracksFromUsers\n\t\t\t\t\t\t\t\t? randomTracksFromUsers.map(item => {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<div key={item.track.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<strong>User:</strong>{' '}\n\t\t\t\t\t\t\t\t\t\t\t\t\t{item.user.username}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t<p>Song: {item.track.title}</p>\n\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\tReferral:{' '}\n\t\t\t\t\t\t\t\t\t\t\t\t\t{item.referral.title}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t<iframe\n\t\t\t\t\t\t\t\t\t\t\t\t\twidth=\"100%\"\n\t\t\t\t\t\t\t\t\t\t\t\t\theight=\"166\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tscrolling=\"no\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tframeborder=\"no\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tallow=\"autoplay\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={`https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${item.track.id}`}\n\t\t\t\t\t\t\t\t\t\t\t\t></iframe>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t\t: ''}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default SCList;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AAQA;AACA;AAFA;AACA;AARA;AAKA;AACA;AANA;AAAA;AAAA;AAAA;AACA;AAaA;AACA;AADA;AACA;AAfA;AACA;AADA;AAmBA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AArBA;AAAA;AACA;AADA;AAAA;AAAA;AAsBA;AACA;AAGA;AAAA;AAAA;AACA;AA3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAlBA;AAiDA;AACA;AACA;AAnDA;AAqDA;AACA;AAAA;AACA;AACA;AAxDA;AAyDA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAKA;AACA;AAFA;AACA;AALA;AAIA;AAKA;AACA;AAVA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAdA;AAYA;AACA;AAMA;AACA;AACA;AACA;AAHA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA1DA;AAmFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AACA;AAFA;AACA;AAKA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AAbA;AAAA;AAeA;AACA;AAFA;AACA;AAfA;AAcA;AAIA;AACA;AACA;AACA;AACA;AAHA;AAnBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AApFA;AA+GA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAnHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAFA;AAcA;AACA;AACA;;;AAqvMA;AACA;AAyMA;;;;;;;A","sourceRoot":""}