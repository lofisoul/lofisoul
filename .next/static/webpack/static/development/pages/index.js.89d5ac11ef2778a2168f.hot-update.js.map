{"version":3,"file":"static/webpack/static/development/pages/index.js.89d5ac11ef2778a2168f.hot-update.js","sources":["webpack:///./components/SCList.js"],"sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport {scAppId, scUser} from '../config';\nimport {shuffle} from '../lib/utils';\n\nclass SCList extends Component {\n    state = {\n        isFetching: false,\n        fiveTracks: null,\n        randomTracksFromUsers: null\n    }\n    \n    initTrack = async () => {\n        //initialize SC\n        this.setState({isFetching:true})\n        \n        const response = await SC.get(`/users/${scUser.id}/favorites`,{\n            limit:1000,\n            linked_partitioning:1\n        })\n\n        const sortedTracks = shuffle(response.collection,5);\n\n        //run logic for getting random song based on users that liked 5 sorted tracks\n        let randomPlaylist = await Promise.all(sortedTracks.map(async(item) => {\n            \n            let newItem = await this.generateRandomPlaylist(item);\n            return newItem\n        }))\n        \n        \n        \n        this.setState({isFetching:false, fiveTracks:sortedTracks, randomTracksFromUsers: randomPlaylist})\n        const track = response.collection[27];\n        const trackSrc = `${track.stream_url}?client_id=${scAppId}`;\n        this.audio = new Audio();\n        this.audio.crossOrigin = \"anonymous\";\n        this.audio.src = trackSrc;\n        this.context = new (window.AudioContext || window.webkitAudioContext)();\n        this.source = this.context.createMediaElementSource(this.audio);\n\n        this.analyser = this.context.createAnalyser();\n        this.source.connect(this.analyser);\n        this.analyser.connect(this.context.destination);\n        this.frequency_array = new Uint8Array(this.analyser.frequencyBinCount);        \n    }\n\n    generateRandomPlaylist = async (track) => {\n        const usersWhoLiked = await SC.get(`/tracks/${track.id}/favoriters`,{\n            limit: 1000,\n            linked_partitioning:1\n        })\n \n        let userArr = usersWhoLiked.collection;\n        const arrayUsersFaves = userArr.filter(user=> user.public_favorites_count>0)\n        //sort users without playlists\n        const randomUser = shuffle(arrayUsersFaves,1)[0];\n        //get first list of random users\n        const userFaves = await SC.get(`/users/${randomUser.id}/favorites`,{\n            limit: 1000,\n            linked_partitioning:1\n        });\n        const randomTrack = shuffle(userFaves.collection,1)[0];\n        const randomObj = {\n            referral: track,\n            user: randomUser,\n            track: randomTrack\n        }\n        return randomObj\n    }\n\n    componentDidMount = () => {\n        SC.initialize({\n            client_id: scAppId,\n            redirect_uri: 'http://jambox.thatdudeartoo.com/callback.html'\n        });\n        this.initTrack();\n    }\n    render() {\n        const {isFetching, fiveTracks, randomTracksFromUsers} = this.state;\n        if(isFetching) {\n            return <div>Fetching...</div>\n         }\n        return (\n            <div>\n                <div style={{borderBottom: '1px solid gray', paddingBottom: '20px'}}>\n                {(fiveTracks) ? fiveTracks.map(track=>{\n                    return <div><p key={track.id}><strong>{track.user.username}</strong><br/>: {track.title}</p>\n                    <iframe width=\"100%\" height=\"300\" scrolling=\"no\" frameborder=\"no\" allow=\"autoplay\" src={`https://w.soundcloud.com/player/?url=https:////api.soundcloud.com/tracks/${track.id}&auto_play=false&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true&visual=true`}></iframe>\n                    </div>\n                }) : ''}\n                </div>\n                <div>\n                {(randomTracksFromUsers) ? randomTracksFromUsers.map(item=>{\n                    return <div key={item.track.id}>\n                        <p><strong>User:</strong> {item.user.username}</p>\n                        <p>Song: {item.track.title}</p>\n                        <p>Referral: {item.referral.title}</p>\n                        <iframe width=\"100%\" height=\"300\" scrolling=\"no\" frameborder=\"no\" allow=\"autoplay\" src={`https://w.soundcloud.com/player/?url=https:////api.soundcloud.com/tracks/${item.id}&auto_play=false&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true&visual=true`}></iframe>\n                    </div>\n                }) : 'Error'}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SCList;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAKA;AACA;AAFA;AACA;AALA;AAIA;AAKA;AACA;AAVA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAbA;AAYA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AACA;AAFA;AACA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAVA;AAAA;AAYA;AACA;AAFA;AACA;AAZA;AAWA;AAIA;AACA;AACA;AACA;AACA;AAHA;AAhBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAuBA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;;;;;;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAIA;;;;AAnGA;AACA;AAqGA;;;;A","sourceRoot":""}