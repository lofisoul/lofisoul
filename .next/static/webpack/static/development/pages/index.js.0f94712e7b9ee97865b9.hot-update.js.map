{"version":3,"file":"static/webpack/static/development/pages/index.js.0f94712e7b9ee97865b9.hot-update.js","sources":["webpack:///./components/SCList.js"],"sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport FetchUser from './FetchUser';\nimport {scAppId, scUser} from '../config';\nimport {shuffle} from '../lib/utils';\n\nclass SCList extends Component {\n    state = {\n        isFetching: false,\n        doneFetching: false,\n        fiveTracks: null,\n        randomTracksFromUsers: null,\n        isModalOpen: true,\n        username: '',\n        user:null,\n        fetchErrorMsg: ''\n    }\n\n    //function to resolve soundcloud user\n    soundCloudResolveUser = async (user) => {\n        try {\n            const userToResolve = await SC.resolve(`https://soundcloud.com/${user}`);\n            this.initTrack(userToResolve);\n            this.setState({user:userToResolve, isModalOpen:false});\n        } catch(e) {\n            const errorMsg = e.status===404 ? `Whoops! That user doesn't exist!` : e.message; \n            this.setState({fetchErrorMsg: errorMsg});  \n        }\n    }\n\n    //get SC user from form\n    saveToState = e => {\n        this.setState({[e.target.name]:e.target.value})\n    }\n\n    onSubmit = e => {\n        e.preventDefault();\n        this.soundCloudResolveUser(this.state.username);\n    }\n    \n    initTrack = async (user) => {\n        //initialize SC\n        this.setState({isFetching:true})\n        \n        const response = await SC.get(`/users/${user.id}/favorites`,{\n            limit:1000,\n            linked_partitioning:1\n        })\n\n        const sortedTracks = shuffle(response.collection,5);\n\n        //run logic for getting random song based on users that liked 5 sorted tracks\n        let randomPlaylist = await Promise.all(sortedTracks.map(async(item) => {\n            \n            let newItem = await this.generateRandomPlaylist(item);\n            return newItem\n        }))\n        \n        \n        \n        this.setState({isFetching:false, fiveTracks:sortedTracks, randomTracksFromUsers: randomPlaylist}); \n    }\n\n    generateRandomPlaylist = async (track) => {\n        const usersWhoLiked = await SC.get(`/tracks/${track.id}/favoriters`,{\n            limit: 1000,\n            linked_partitioning:1\n        })\n \n        let userArr = usersWhoLiked.collection;\n        const arrayUsersFaves = userArr.filter(user=> user.public_favorites_count>0)\n        //sort users without playlists\n        //TODO::need to figure out a way to filter out user\n        let randomUser = shuffle(arrayUsersFaves,1)[0];\n        //get first list of random users\n        const userFaves = await SC.get(`/users/${randomUser.id}/favorites`,{\n            limit: 1000,\n            linked_partitioning:1\n        });\n        const randomTrack = shuffle(userFaves.collection,1)[0];\n        const randomObj = {\n            referral: track,\n            user: randomUser,\n            track: randomTrack\n        }\n        return randomObj\n    }\n\n    componentDidMount = () => {\n        SC.initialize({\n            client_id: scAppId,\n            redirect_uri: 'http://jambox.thatdudeartoo.com/callback.html'\n        });\n\n    }\n    render() {\n        const {isFetching, fiveTracks, randomTracksFromUsers, isModalOpen, username, fetchErrorMsg,doneFetching} = this.state;\n        return (\n            <div>\n                <FetchUser onSubmit={this.onSubmit} isModalOpen={isModalOpen} username={username} saveToState={this.saveToState} fetchErrorMsg={fetchErrorMsg} />\n                {isFetching ? (<div>Fetching...</div>) : (\n                <>\n                <div>\n                    {(fiveTracks) ? fiveTracks.map(track=>{\n                        return <div><p key={track.id}><strong>{track.user.username}</strong><br/>: {track.title}</p>\n                        <iframe width=\"100%\" height=\"166\" scrolling=\"no\" frameborder=\"no\" allow=\"autoplay\" src={`https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${track.id}`}></iframe>\n                        </div>\n                    }) : ''}\n                </div>\n                <div>\n                    {(randomTracksFromUsers) ? randomTracksFromUsers.map(item=>{\n                        return <div key={item.track.id}>\n                            <p><strong>User:</strong> {item.user.username}</p>\n                            <p>Song: {item.track.title}</p>\n                            <p>Referral: {item.referral.title}</p>\n                            <iframe width=\"100%\" height=\"166\" scrolling=\"no\" frameborder=\"no\" allow=\"autoplay\" src={`https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${item.track.id}`}></iframe>\n                        </div>\n                    }) : ''}\n                </div>\n                </>\n                )}\n            </div>\n        )\n    }\n}\n\nexport default SCList;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AALA;AAAA;AACA;AADA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAKA;AACA;AAFA;AACA;AALA;AAIA;AAKA;AACA;AAVA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAbA;AAYA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AACA;AAFA;AACA;AAKA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAXA;AAAA;AAaA;AACA;AAFA;AACA;AAbA;AAYA;AAIA;AACA;AACA;AACA;AACA;AAHA;AAjBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAwBA;AACA;AACA;AACA;AAFA;AAKA;AACA;;;;;;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAMA;;;;AArHA;AACA;AAuHA;;;;A","sourceRoot":""}